[{"prefix":"ng-pipe-uppercase","description":"Uppercase pipe","types":"typescript, html","body":["{{ ${variable} | uppercase }}$0"]},{"prefix":"ng-pipe-lowercase","description":"Lowercase pipe","types":"typescript, html","body":["{{ ${variable} | lowercase }$0"]},{"prefix":"ng-pipe-titlecase","description":"v4: TitlecaseÂ pipe","types":"typescript, html","body":["{{ ${variable} | titlecase }$0"]},{"prefix":"ng-pipe-date","description":"Date pipe - Default format: 09/15/1971","types":"typescript, html","body":["{{ ${variable} | date }}$0"]},{"prefix":"ng-pipe-date-custom","description":"Date pipe - Format: \"MM/dd/yy\" = 09/15/71","types":"typescript, html","body":["{{ ${variable} | date:\"MM/dd/yy\" }}$0"]},{"prefix":"ng-pipe-date-short","description":"Short date pipe - Format: 09/15/1971","types":"typescript, html","body":["{{ ${variable} | date:shortDate }}$0"]},{"prefix":"ng-pipe-date-full","description":"Full date pipe - Format: Wednesday, September 15, 1971","types":"typescript, html","body":["{{ ${variable} | date:fullDate }}$0"]},{"prefix":"ng-pipe-percent","description":"Percent pipe - Usage: number_expression &#x7c; percent[:digitInfo]","types":"typescript, html","body":["{{ ${variable} | percent:${digitInfo} }}$0"]},{"prefix":"ng-pipe-decimal","description":"Decimal pipe - Usage: number_expression &#x7c; decimal[:digitInfo]","types":"typescript, html","body":["{{ ${variable} | decimal:${digitInfo} }}$0"]},{"prefix":"ng-pipe-slice","description":"Slice pipe - Usage: array_or_string_expression &#x7c; slice:start[:end]","types":"typescript, html","body":["{{ ${variable} | slice:${start}:${end} }}$0"]},{"prefix":"ng-pipe-currency","description":"Currency pipe - Usage: money &#x7c; currency:'EUR'","types":"typescript, html","body":["{{ ${variable} | currency:'${CURRENCY}' }}$0"]},{"prefix":"ng-pipe-json","description":"Json pipe - Usage: object &#x7c; json","types":"typescript, html","body":["{{ ${object} | json }}$0"]},{"prefix":"ng-pipe-async","description":"Async pipe - Usage: observable_or_promise_expression &#x7c; async","types":"typescript, html","body":["{{ ${observable} | async }}$0"]},{"prefix":"ng-router-link","description":"Router link","types":"typescript, html","body":["<a [routerLink]=\"[ '/${path}', ${routeParam} ]\">$0"]},{"prefix":"ng-router-attribute","description":"Router link","types":"typescript, html","body":["[routerLink]=\"[ '/${path}', ${routeParam} ]\"$0"]},{"prefix":"ng-router-linkActive","description":"Router active link","types":"typescript, html","body":["<a [routerLink]=\"[ '/${path}' ]\" routerLinkActive=\"active\">$0"]},{"prefix":"ng-router-outlet","description":"Router outlet element","types":"typescript, html","body":["<router-outlet></router-outlet>","$0"]},{"prefix":"ng-router-outlet-name","description":"Router outlet element with name","types":"typescript, html","body":["<router-outlet name=\"${name}\"></router-outlet>","$0"]},{"prefix":"ng-if","description":"If directive: *ngIf=\"statement\"","types":"typescript, html","body":["*ngIf=\"${statement}\""]},{"prefix":"ng-if-else","description":"v4: If else directive: *ngIf=\"statement; else\"","types":"typescript, html","body":["<div *ngIf=\"${statement}; else ${elseTemplate}\">","\t$1","</div>","<ng-template #${elseTemplate}>","\t$2","</ng-template>","$0"]},{"prefix":"ng-if-then-else","description":"v4: If then else directive: *ngIf=\"statement; then; else\"","types":"typescript, html","body":["<div *ngIf=\"${statement}; then ${thenTemplate}; else ${elseTemplate}\"></div>","<ng-template #${thenTemplate}>","\t$1","</ng-template>","<ng-template #${elseTemplate}>","\t$2","</ng-template>","$0"]},{"prefix":"ng-for","description":"For-loop directive","types":"typescript, html","body":["*ngFor=\"let ${item} of ${item}s\"$0"]},{"prefix":"ng-for-li","description":"For-loop directive with li element","types":"typescript, html","body":["<li *ngFor=\"let ${item} of ${item}s\">$0</li>"]},{"prefix":"ng-for-index","description":"For-loop directive with index","types":"typescript, html","body":["*ngFor=\"let ${item} of ${item}s; let i=index\"$0"]},{"prefix":"ng-for-trackBy","description":"For-loop directive with trackBy","types":"typescript, html","body":["*ngFor=\"let ${item} of ${item}s; trackBy:${item}.id\""]},{"prefix":"ng-class","description":"CSS class","types":"typescript, html","body":["[ngClass]=\"{${class}}\""]},{"prefix":"ng-style","description":"CSS style","types":"typescript, html","body":["[ngStyle]=\"{'${property}': ${expression}}\""]},{"prefix":"ng-property","description":"Property: [property]=\"statement\"","types":"typescript, html","body":["[property]=\"${statment}\""]},{"prefix":"ng-event","description":"Event: (event) = \"onEvent()\"","types":"typescript, html","body":["(${event}) = \"on${Event}()\"$0"]},{"prefix":"ng-binding-oneway","description":"Property: [property]=\"statement\"","types":"typescript, html","body":["[property]=\"${statment}\"$0"]},{"prefix":"ng-binding-twoway","description":"Two-way data binding with the NgModel","types":"typescript, html","body":["[(ngModel)]=\"${Name}\"$0"]},{"prefix":"ng-interpolation","description":"Interpolation: {{ interpolation }}","types":"typescript, html","body":["{{ ${interpolation} }}$0"]},{"prefix":"ng-repeat","description":"Use ngFor instead.","types":"typescript, html","body":["*ngFor=\"let ${item} of ${item}s\"$0"]},{"prefix":"ng-click","description":"Click event","types":"typescript, html","body":["(click)=\"${expression}\"$0"]},{"prefix":"ng-show","description":"Usage: Bind to the hidden property.","types":"typescript, html","body":["[hidden]=\"!${expression}\"$0"]},{"prefix":"ng-hide","description":"Usage: Bind to the hidden property.","types":"typescript, html","body":["[hidden]=\"${expression}\"$0"]},{"prefix":"ng-href","description":"Usage: Bind to the href property.","types":"typescript, html","body":["[href]=\"${url}\"$0"]},{"prefix":"ng-src","description":"Usage: Bind to the src property.","types":"typescript, html","body":["[src]=\"${url}\"$0"]},{"prefix":"ng-orderBy","description":"For performance reasons, no comparable pipe exists in Angular 2. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.","types":"typescript, html","body":["$0"]},{"prefix":"ng-filter","description":"For performance reasons, no comparable pipe exists in Angular 2. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.","types":"typescript, html","body":["$0"]},{"prefix":"ng-button-submit","description":"A submit button element with a click event","types":"typescript, html","body":["<button type=\"submit\">${Submit}</button>","$0"]},{"prefix":"ng-button","description":"A button element with a click event","types":"typescript, html","body":["<button (click)=\"${onClick()}\">${name}</button>","$0"]},{"prefix":"ng-import","description":"import module or component from path;","types":"typescript, html","body":["import ${module or component} from '${path}';","$0"]},{"prefix":"ng-http-get","description":"Http observable get request","types":"typescript, html","body":["this.http.get('${url}')","\t.map((res: Response) => {","\t\tres.json();","})$0"]},{"prefix":"ng-http","description":"Http observable get & post request","types":"typescript, html","body":["get${Type}(): Observable<I${Type}[]> {","\treturn this.http.get(${name})","\t\t.map((res: Response) => <I${Type}[]>res.json())","\t\t.catch(this.handleError);","}","","add${Type}(${name}: string): Observable<I${Type}> {","\tlet body = JSON.stringify({ ${name} });","\tlet headers = new Headers({ 'Content-Type': 'application/json'});","\tlet options = new RequestOptions({ headers: headers });","","\treturn this.http.post(this.${url}, body, options)","\t\t.map(this.handleResponse)","\t.catch(this.handleError);","}","private handleError(error: Response) {","\tconsole.error(error);","\treturn Observable.throw(error.json().error || 'Server error');","}","$0"]},{"prefix":"ng-debug","description":"pre obj pipe json","types":"typescript, html","body":["<pre>{{ ${obj} | json }}</pre>$0"]},{"prefix":"ng-debug-async","description":"pre obj pipe async pipe json","types":"typescript, html","body":["<pre>{{ ${obj} | async | json }}</pre>$0"]},{"prefix":"ng-fx-import","description":"Flex Layout Import","types":"typescript, html","body":["import { FlexLayoutModule } from '@angular/flex-layout';","// Add ${FlexLayoutModule.forRoot()} to the @NgModule imports section"]},{"prefix":"ng-fx-row","description":"Flex Layout Row","types":"typescript, html","body":["<div fxLayout=\"row\" fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"ng-fx-row-reverse","description":"Flex Layout Reverse Row","types":"typescript, html","body":["<div fxLayout=\"row-reverse\" fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"ng-fx-col","description":"Flex Layout Column","types":"typescript, html","body":["<div fxLayout=\"column\" fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"ng-fx-col-reverse","description":"Flex Layout Reverse Column","types":"typescript, html","body":["<div fxLayout=\"column-reverse\" fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"ng-fx-item","description":"Flex Layout Item","types":"typescript, html","body":["<div fxFlex=\"${value}%\">","\t$0","</div>"]},{"prefix":"ng-fx-item-offset","description":"Flex Layout Item with fxFlexOffset","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexOffset=\"${offset}px\">","\t$0","</div>"]},{"prefix":"ng-fx-item-order","description":"Flex Layout Item with fxFlexOrder","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexOrder=\"${order}\">","\t$0","</div>"]},{"prefix":"ng-fx-item-align","description":"Flex Layout Item with fxFlexAlign","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexAlign=\"${start|baseline|center|end}\">","\t$0","</div>"]},{"prefix":"ng-fx-item-fill","description":"Flex Layout Item with fxFlexFill","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexFill>","\t$0","</div>"]}]
