{
  "RxJS Import Observable": {
    "prefix": "rx-import-observable",
    "description": "RxJS Import Observable",
    "types": "typescript, javascript",
    "body": [
      "import { Observable } from 'rxjs';",
      "$0"
    ]
  },
  "RxJS Import Subject": {
    "prefix": "rx-import-subject",
    "description": "RxJS Import Subject",
    "types": "typescript, javascript",
    "body": [
      "import { Subject } from 'rxjs';",
      "$0"
    ]
  },
  "RxJS Import an Operator": {
    "prefix": "rx-import-operator",
    "description": "RxJS Import an Operator",
    "types": "typescript, javascript",
    "body": [
      "import { ${1:switchMap} } from 'rxjs/operators';",
      "$0"
    ]
  },
  "RxJS MergeMap Example": {
    "prefix": "rx-mergeMap",
    "description": "RxJS MergeMap Example",
    "types": "typescript, javascript",
    "body": [
      "getItems(ids: number[]): Observable<Item> {",
      "\treturn from(ids).pipe(",
      "\t\tmergeMap(id => <Observable<Item>> this.httpClient.get(`item/${id}`))",
      "\t);",
      "}",
      "$0"
    ]
  },
  "Register Service Worker": {
    "prefix": "sw-register",
    "description": "Register Service Worker",
    "types": "typescript, javascript",
    "body": [
      "if ('serviceWorker' in navigator) {",
      "\twindow.addEventListener('load', () => {",
      "\tnavigator.serviceWorker.register('/sw.js');",
      "});",
      "}$0"
    ]
  },
  "Register Service Worker and Check": {
    "prefix": "sw-register-and-check",
    "description": "Register Service Worker and Check",
    "types": "typescript, javascript",
    "body": [
      "if ('serviceWorker' in navigator) {",
      "if('serviceWorker' in window.navigator) {",
      "\twindow.addEventListener('load', () => {",
      "\t\twindow.navigator.serviceWorker.register('/sw.js', { scope: '/' }).then((registration) => {",
      "\t\t\tconsole.log('ServiceWorker registration successful with scope: ', registration.scope);",
      "\t\t}).catch((error) => {",
      "\t\t\tconsole.error('ServiceWorker registration failed: ', error);",
      "\t\t});",
      "\t});",
      "}$0"
    ]
  }
}
