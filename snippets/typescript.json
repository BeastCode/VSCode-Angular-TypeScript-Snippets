// Angular for TypeScript v2.1.1
// ngRx v

{
  // TypeScript Snippets
  "Angular Component": {
    "prefix": "ng-component",
    "description": "Angular 2+ Component Snippet",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${selector}',",
      "\ttemplateUrl: './${name}.component.html',",
      "\tstyleUrls: ['./${name}.component.css']",
      "})",
      "export class ${Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }",
      "}"
    ]
  },
  "Angular Component Inline": {
    "prefix": "ng-component-inline",
    "description": "Angular 2+ Component Inline Snippet",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${selector}',",
      "\ttemplate: `",
      "\t\t$1`",
      "\tstyles: ['$2']",
      "})",
      "export class ${Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }",
      "}"
    ]
  },
  "Angular Service": {
    "prefix": "ng-service",
    "description": "Angular 2+ Service",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ${Name}Service {",
      "$0}"
    ]
  },
 
  "Angular 2+ ": {
    "prefix": "ng-bootstraping",
    "description": "",
    "body": [
      "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';",
      "import { enableProdMode } from '@angular/core';",
      "import { AppModule } from './app/app.module';",
      "",
      "if (environment.production) {",
      "\tenableProdMode();",
      "}",
      "platformBrowserDynamic().bootstrapModule(AppModule)",
      "\t.then(success => console.log(`Bootstrap success`))",
      "\t.catch(err => console.error(err));",
      "",
      "// Move to separate file",
      "export const environment = {",
      "\tproduction: false",
      "};"
    ]
  },
  "Angular 2+ ngModule": {
    "prefix": "ng-module",
    "description": "",
    "body": [
      "import { NgModule } from '@angular/core';",
      "",
      "@NgModule({ declarations: [],",
      "\timports: [],",
      "\texports: [],",
      "\tproviders: []],",
      "\tbootstrap: []",
      "})",
      "class ${Name}Module {}"
    ]
  },
  "Angular 2+ Pipe": {
    "prefix": "ng-pipe",
    "description": "",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({name: '${name}'})",
      "export class ${Name}Pipe()  implements PipeTransform {",
      "\ttransform(value: any): any {",
      "\t\t$0",
      "\t}",
      "}"
    ]
  },
  "Angular 2+ Pipe Example": {
    "prefix": "ng-pipe-example",
    "description": "Angular  Pipe Example",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "/*",
      " * Raise the value exponentially",
      " * Takes an exponent argument that defaults to 1.",
      " * Usage:",
      " *   value | exponentialStrength:exponent",
      " * Example:",
      " *   {{ 2 |  exponentialStrength:10}}",
      " *   formats to: 1024",
      "*/",
      "@Pipe({name: 'exponentialStrength'})",
      "export class ExponentialStrengthPipe implements PipeTransform {",
      "\ttransform(value: number, exponent: string): number {",
      "\t\tlet exp = parseFloat(exponent);",
      "\t\treturn Math.pow(value, isNaN(exp) ? 1 : exp);",
      "\t}",
      "}"
    ]
  },
  "Angular 2+ Directive": {
    "prefix": "ng-directive",
    "description": "",
    "body": [
      "@Directive({...})",
      "class ${Name}Directive() {}"
    ]
  },
  
  // Lifecycle Hooks
  "Angular 2+ Lifecycle Hooks": {
    "prefix": "ng-ngOnChanges",
    "description": "",
    "body": [
      "ngOnChanges(changeRecord)() {",
      "\t//Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle Hooks": {
    "prefix": "ng-onInit",
    "description": "",
    "body": [
      "ngOnInit() {",
      "\t//Called after the constructor, initializing input properties, and the first call to ngOnChanges.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle Hooks": {
    "prefix": "ng-doCheck",
    "description": "",
    "body": [
      "ngDoCheck() {",
      "\t//Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle Hooks": {
    "prefix": "ng-afterContentInit",
    "description": "",
    "body": [
      "ngAfterContentInit() {",
      "\t//Called after ngOnInit when the component's or directive's content has been initialized.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle Hooks": {
    "prefix": "ng-ngAfterContentChecked",
    "description": "",
    "body": [
      "ngAfterContentChecked() {",
      "\t//Called after every check of the component's or directive's content.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle Hooks": {
    "prefix": "ng-afterViewInit",
    "description": "",
    "body": [
      "ngAfterViewInit() {",
      "\t//Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle Hooks": {
    "prefix": "ng-afterViewChecked",
    "description": "",
    "body": [
      "ngAfterViewChecked() {",
      "\t//Called after every check of the component's view. Applies to components only.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle Hooks": {
    "prefix": "ng-onDestroy",
    "description": "",
    "body": [
      "ngOnDestroy() {",
      "\t//Called once, before the instance is destroyed.",
      "/t$0",
      "}"
    ]
  },


  // Router
  "Angular 2+ Routing": {
    "prefix": "ng-router",
    "description": "",
    "body": [
      "const routes: Routes = [",
      "\t{ path: '', component: HomeComponent },",
      "\t{ path: 'path/:routeParam', component: MyComponent },",
      "\t{ path: 'staticPath', component: ... },",
      "\t{ path: '**', component: ... },",
      "\t{ path: 'oldPath', redirectTo: '/staticPath' },",
      "\t{ path: ..., component: ..., data: { message: 'Custom' } }",
      "]);",
      "",
      "const routing = RouterModule.forRoot(routes);"
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-router-routes",
    "description": "",
    "body": [
      "import { Routes, RouterModule, ... } from '@angular/router';",
      "",
      ""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-router-link",
    "description": "",
    "body": [
      "<a [routerLink]=\"[ '/${path}', ${routeParam} ]\">"
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-router-linkActive",
    "description": "",
    "body": [
      "<a [routerLink]=\"[ '/path' ]\" routerLinkActive=\"active\">"
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-router-linkWithHref",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-router-outlet",
    "description": "",
    "body": [
      "<router-outlet></router-outlet>",
      "$0"
    ]
  },

  // ngRx Snippets
  "Angular 2+ ": {
    "prefix": "ng-rx",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-rx",
    "description": "",
    "body": [
      ""
    ]
  },

  // Test Snippets
  "Angular 2+ ": {
    "prefix": "ng-test-component",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-test-directive",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-test-service",
    "description": "",
    "body": [
      ""
    ]
  },

  // HTML Directives
  "Angular 2+ If Directive": {
    "prefix": "ng-if",
    "description": "If Directive: *ngIf=\"statement\"",
    "body": [
      "*ngIf=\"${statement}\""
    ]
  },
  "Angular 2+ For-loop Directive": {
    "prefix": "ng-for",
    "description": "For-loop Directive Angular 2+",
    "body": [
      "*ngFor=\"let ${item} of ${item}s\""
    ]
  },
  "Angular 2+ For-loop Directive with li element": {
    "prefix": "ng-for-li",
    "description": "For-loop Directive with li element",
    "body": [
      "<li *ngFor=\"let ${item} of ${item}s\"></li>"
    ]
  },
  "Angular 2+ For-loop Directive with index": {
    "prefix": "ng-for-index",
    "description": "For-loop Directive Angular 2+",
    "body": [
      "*ngFor=\"let ${item} of ${item}s; let i=index\""
    ]
  },
  "Angular 2+ For-loop Directive with trackBy": {
    "prefix": "ng-for-trackBy",
    "description": "For-loop Directive Angular 2+",
    "body": [
      "*ngFor=\"let ${item} of ${item}s; trackBy:${item}.id\""
    ]
  },

  "Angular 2+ ": {
    "prefix": "ng-class",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-style",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-switch",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ Proprty": {
    "prefix": "ng-property",
    "description": "Property: [property]=\"statement\"",
    "body": [
      "[property]=\"statment\""
    ]
  },
  "Angular 2+ Event": {
    "prefix": "ng-event",
    "description": "Event: (event) = \"onEvent()\"",
    "body": [
      "(${event}) = \"on${Event}()\""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-binding-oneway",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ ": {
    "prefix": "ng-binding-twoway",
    "description": "Property and Event: [(ngModel)]=\"heroName\"",
    "body": [
      "[(ngModel)]=\"heroName\""
    ]
  },
  "Angular 2+ Interpolation": {
    "prefix": "ng-interpolation",
    "description": "Interpolation: {{ interpolation }}",
    "body": [
      "{{ ${interpolation} }}"
    ]
  }

  
}
