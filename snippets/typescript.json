[{"prefix":"ng-component","description":"Component with template and style urls","types":"typescript","body":["import { Component, OnInit } from '@angular/core';","","@Component({","\tselector: '${selector}',","\ttemplateUrl: './${name}.component.html',","\tstyleUrls: ['./${name}.component.css']","})","export class ${Name}Component implements OnInit {","\tconstructor($0) { $1}","","\tngOnInit() { }","}$2"]},{"prefix":"ng-component-inline","description":"Component with inline Template and Styles","types":"typescript","body":["import { Component, OnInit } from '@angular/core';","","@Component({","\tselector: '${selector}',","\ttemplate: `","\t\t$1`,","\tstyles: [`$2`]","})","export class ${Name}Component implements OnInit {","\tconstructor() { $0}","","\tngOnInit() { }","}"]},{"prefix":"ng-validator","description":"Angular validator snippet","types":"typescript","body":["import { Directive } from '@angular/core';","import { Validator, NG_VALIDATORS, FormControl } from '@angular/forms';","","@Directive({","\tselector: '[${validatorName}][ngModel]',","\tproviders: [","\t\t{ provide: NG_VALIDATORS, useExisting: ${className}, multi: true }","\t]","})","","export class ${className} implements Validator {","\tvalidate(c: FormControl): { [key: string]: any } {","\t\tif (valid) {","\t\t\treturn null;","\t\t}","","\t\treturn {","\t\t\t${validatorName}: {","\t\t\t\tvalid: false","\t\t\t}","\t\t};","\t}","}"]},{"prefix":"ng-directive","description":"Directive template","types":"typescript","body":["import { Directive } from '@angular/core';","","@Directive({","\tselector: '${selector}',","})","export class ${Name}Directive {$0}"]},{"prefix":"ng-directive-css","description":"CSS directive","types":"typescript","body":["import { Directive, ElementRef, Input } from '@angular/core';","","@Directive({","\tselector: '[${selector}]',","})","export class ${Name}Directive {","\tconstructor(el: ElementRef) {}","","\tprivate ${name}(${value}: string) {","\tthis.el.nativeElement.style.${proptery} = ${value};","\t}","}"]},{"prefix":"ng-directive-attribute","description":"Attribute directive","types":"typescript","body":["import { Directive } from '@angular/core';","","@Directive({","\tselector: '[${selector}]',","})","export class ${Name}Directive {$0}"]},{"prefix":"ng-service","description":"Basic service","types":"typescript","body":["import { Injectable } from '@angular/core';","","@Injectable()","export class ${Name}Service {","$0}"]},{"prefix":"ng-bootstraping","description":"Bootstraping example","types":"typescript","body":["import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';","import { enableProdMode } from '@angular/core';","import { AppModule } from './app/app.module';","","if (environment.production) {","\tenableProdMode();","}","platformBrowserDynamic().bootstrapModule(AppModule)","\t.then(success => console.log(`Bootstrap success`))","\t.catch(err => console.error(err));","","// Move to separate file","export const environment = {","\tproduction: false","};"]},{"prefix":"ng-module","description":"Feature Module","types":"typescript","body":["import { NgModule } from '@angular/core';","import { CommonModule } from '@angular/common';","","@NgModule({","\tdeclarations: [],","\timports: [ CommonModule ],","\texports: [],","\tproviders: [],","})","export class ${Feature}Module {}"]},{"prefix":"ng-module-root","description":"App root module","types":"typescript","body":["import { NgModule } from '@angular/core';","import { BrowserModule } from '@angular/platform-browser';","import { ${App}Component }  from './${app}.component';","","@NgModule({","\tdeclarations: [ ${App}Component ],","\timports: [ BrowserModule ],","\tproviders: [],","\tbootstrap: [ ${App}Component ]","})","export class ${App}Module {}"]},{"prefix":"ng-pipe","description":"Pipe template","types":"typescript","body":["import { Pipe, PipeTransform } from '@angular/core';","","@Pipe({name: '${name}'})","export class ${Name}Pipe implements PipeTransform {","\ttransform(value: any): any {","\t\t$0","\t}","}"]},{"prefix":"ng-pipe-example","description":"Angular pipe example","types":"typescript","body":["import { Pipe, PipeTransform } from '@angular/core';","/*"," * Raise the value exponentially"," * Takes an exponent argument that defaults to 1."," * Usage:"," *   value | exponentialStrength:exponent"," * Example:"," *   {{ 2 |  exponentialStrength:10}}"," *   formats to: 1024","*/","@Pipe({name: 'exponentialStrength'})","export class ExponentialStrengthPipe implements PipeTransform {","\ttransform(value: number, exponent: string): number {","\t\tlet exp = parseFloat(exponent);","\t\treturn Math.pow(value, isNaN(exp) ? 1 : exp);","\t}","}"]},{"prefix":"ng-pipe-uppercase","description":"Uppercase pipe","types":"typescript, html","body":["{{ ${variable} | uppercase }}$0"]},{"prefix":"ng-pipe-lowercase","description":"Lowercase pipe","types":"typescript, html","body":["{{ ${variable} | lowercase }$0"]},{"prefix":"ng-pipe-titlecase","description":"v4: TitlecaseÂ pipe","types":"typescript, html","body":["{{ ${variable} | titlecase }$0"]},{"prefix":"ng-pipe-date","description":"Date pipe - Default format: 09/15/1971","types":"typescript, html","body":["{{ ${variable} | date }}$0"]},{"prefix":"ng-pipe-date-custom","description":"Date pipe - Format: \"MM/dd/yy\" = 09/15/71","types":"typescript, html","body":["{{ ${variable} | date:\"MM/dd/yy\" }}$0"]},{"prefix":"ng-pipe-date-short","description":"Short date pipe - Format: 09/15/1971","types":"typescript, html","body":["{{ ${variable} | date:shortDate }}$0"]},{"prefix":"ng-pipe-date-full","description":"Full date pipe - Format: Wednesday, September 15, 1971","types":"typescript, html","body":["{{ ${variable} | date:fullDate }}$0"]},{"prefix":"ng-pipe-percent","description":"Percent pipe - Usage: number_expression &#x7c; percent[:digitInfo]","types":"typescript, html","body":["{{ ${variable} | percent:${digitInfo} }}$0"]},{"prefix":"ng-pipe-decimal","description":"Decimal pipe - Usage: number_expression &#x7c; decimal[:digitInfo]","types":"typescript, html","body":["{{ ${variable} | decimal:${digitInfo} }}$0"]},{"prefix":"ng-pipe-slice","description":"Slice pipe - Usage: array_or_string_expression &#x7c; slice:start[:end]","types":"typescript, html","body":["{{ ${variable} | slice:${start}:${end} }}$0"]},{"prefix":"ng-pipe-currency","description":"Currency pipe - Usage: money &#x7c; currency:'EUR'","types":"typescript, html","body":["{{ ${variable} | currency:'${CURRENCY}' }}$0"]},{"prefix":"ng-pipe-json","description":"Json pipe - Usage: object &#x7c; json","types":"typescript, html","body":["{{ ${object} | json }}$0"]},{"prefix":"ng-pipe-async","description":"Async pipe - Usage: observable_or_promise_expression &#x7c; async","types":"typescript, html","body":["{{ ${observable} | async }}$0"]},{"prefix":"ng-ngOnChanges","description":"Lifecycle hook: Called before any other lifecycle hook","types":"typescript","body":["ngOnChanges(changes: SimpleChanges) {","\t//Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.","\t//Add '${implements OnChanges}' to the class.","\t$0","}"]},{"prefix":"ng-onInit","description":"Lifecycle hook: Called after the constructor","types":"typescript","body":["ngOnInit() {","\t//Called after the constructor, initializing input properties, and the first call to ngOnChanges.","\t//Add 'implements OnInit' to the class.","\t$0","}"]},{"prefix":"ng-doCheck","description":"Lifecycle hook: Called every time that the input properties of a component or a directive are checked","types":"typescript","body":["ngDoCheck() {","\t//Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.","\t//Add 'implements DoCheck' to the class.","\t$0","}"]},{"prefix":"ng-afterContentInit","description":"Lifecycle hook: Called after ngOnInit when the component's or directive's content has been initialized","types":"typescript","body":["ngAfterContentInit() {","\t//Called after ngOnInit when the component's or directive's content has been initialized.","\t//Add 'implements AfterContentInit' to the class.","\t$0","}"]},{"prefix":"ng-afterContentChecked","description":"Lifecycle hook: Called after every check of the component's or directive's content","types":"typescript","body":["ngAfterContentChecked() {","\t//Called after every check of the component's or directive's content.","\t//Add 'implements AfterContentChecked' to the class.","\t$0","}"]},{"prefix":"ng-afterViewInit","description":"Lifecycle hook: Called after ngAfterContentInit when the component's view has been initialized","types":"typescript","body":["ngAfterViewInit() {","\t//Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.","\t//Add 'implements AfterViewInit' to the class.","\t$0","}"]},{"prefix":"ng-afterViewChecked","description":"Lifecycle hook: Called after every check of the component's view. Applies to components only","types":"typescript","body":["ngAfterViewChecked() {","\t//Called after every check of the component's view. Applies to components only.","\t//Add 'implements AfterViewChecked' to the class.","\t$0","}"]},{"prefix":"ng-onDestroy","description":"Lifecycle hook: Called before the instance is destroyed","types":"typescript","body":["ngOnDestroy() {","\t//Called once, before the instance is destroyed.","\t//Add 'implements OnDestroy' to the class.","\t$0","}"]},{"prefix":"wat","description":"A lightning talk by Gary Bernhardt from CodeMash 2012. ng-wat talk by Shai Reznik in 2015","types":"typescript","body":["`M.`MMMm                 ,M' .M.    MMMMMMM MMMMMMMMM"," `M.`MMMm               ,M' .MMM.   MMMMMMM MMMMMMMMM","  `M.`MMMm             ,M' :MMMMM.        M MMMM     ","   `M.`MMMm     .m    ,M' . `MMMMM.       M MMMM     ","    `M.`MMMm    MMm  ,M' .M. `MMMMM.      M MMMM     ","     `M.`MMMm .`MMMm,M' .M`M. `MMMMM.     M MMMM     ","      `M.`MMMmM.`MMMM' .M' `M. `MMMMM.    M MMMM     ","       `M.`MMM`M.`MM' .M'   `M. `MMMMM.   M MMMM     ","        `M.`M' `M,`' .MMMMMMMMM. `MMMMM.  M MMMM     ","         `M.`   `M' .M'       `M. `MMMMM. M MMMM     "]},{"prefix":"ng-conf","description":"The World's Original Angular Conference","types":"typescript","bodyhe World's Original Angular Conference","                 See you in 2018","               Salt Lake City, Utah"]},{"prefix":"ng-router","description":"Router template","types":"typescript","body":["import { Routes, RouterModule } from '@angular/router';","import { NgModule } from '@angular/core';","","import { ${Home}Component } from './';","import { ${Name2}Component } from './';","import { ${Name3}Component } from './';","import { ${Name4}Component } from './';","import { PageNotFoundComponent } from './';","","const routes: Routes = [","\t{ path: '', component: ${Home}Component },","\t{ path: '${path2}', component: ${Name2}Component },","\t{ path: '${path3}', component: ${Name3}Component },","\t{ path: '${path4}', component: ${Name4}Component },","\t{ path: '**', component: PageNotFoundComponent },","","\t//{ path: 'path/:routeParam', component: MyComponent },","\t//{ path: 'staticPath', component: ... },","\t//{ path: '**', component: ... },","\t//{ path: 'oldPath', redirectTo: '/staticPath' },","\t//{ path: ..., component: ..., data: { message: 'Custom' }","];","","@NgModule({","\timports: [RouterModule.forChild(routes)],","\texports: [RouterModule]","})","export class ${Feature}RoutingModule {}","$0"]},{"prefix":"ng-router-appmodule","description":"Routes to include in root module","types":"typescript","body":["import { RouterModule } from '@angular/router';","import { routes } from './routes';","","const routes: Routes = [","\t{ path: '', component: ${Home}Component },","\t{ path: '${path}', component: ${Feature}Component },","\t{ path: '**', component: PageNotFoundComponent },","];","","@NgModule({","\timports: [RouterModule.forRoot(routes)],","\texports: [RouterModule]","})","export class AppRoutingModule {}","$0"]},{"prefix":"ng-router-featuremodule","description":"Routes to include in a feature module","types":"typescript","body":["import { RouterModule } from '@angular/router';","import { routes } from './routes';","","const routes: Routes = [","\t{ path: '${path}', component: ${Feature}Component }","];","","@NgModule({","\timports: [RouterModule.forChild(routes)],","\texports: [RouterModule]","})","export class ${Feature}RoutingModule {}","$0"]},{"prefix":"ng-router-link","description":"Router link","types":"typescript, html","body":["<a [routerLink]=\"[ '/${path}', ${routeParam} ]\">$0"]},{"prefix":"ng-router-attribute","description":"Router link","types":"typescript, html","body":["[routerLink]=\"[ '/${path}', ${routeParam} ]\"$0"]},{"prefix":"ng-router-linkActive","description":"Router active link","types":"typescript, html","body":["<a [routerLink]=\"[ '/${path}' ]\" routerLinkActive=\"active\">$0"]},{"prefix":"ng-router-outlet","description":"Router outlet element","types":"typescript, html","body":["<router-outlet></router-outlet>","$0"]},{"prefix":"ng-router-outlet-name","description":"Router outlet element with name","types":"typescript, html","body":["<router-outlet name=\"${name}\"></router-outlet>","$0"]},{"prefix":"ng-route-guard-canactivate","description":"CanActivate Guard Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';","import { Observable } from 'rxjs/Observable';","","@Injectable()","export class ${CanActivate}Guard implements CanActivate {","\tcanActivate(","\t\troute: ActivatedRouteSnapshot,","\t\tstate: RouterStateSnapshot","\t): Observable<boolean> | Promise<boolean> | boolean {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-route-guard-canactivatechild","description":"CanActivateChild Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';","import { Observable } from 'rxjs/Observable';","","@Injectable()","export class ${CanActivateChild}Guard implements CanActivateChild {","\tcanActivateChild(","\t\troute: ActivatedRouteSnapshot,","\t\tstate: RouterStateSnapshot","\t): Observable<boolean> | Promise<boolean> | boolean {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-route-guard-resolve","description":"Resolve Guard Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';","import { Observable } from 'rxjs/Observable';","","@Injectable()","export class ${Resolve}Guard implements Resolve<${T}> {","\tresolve(","\t\troute: ActivatedRouteSnapshot,","\t\tstate: RouterStateSnapshot","\t): Observable<any> | Promise<any> | any {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-route-guard-canload","description":"CanLoad Guard Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { CanLoad, Route } from '@angular/router';","import { Observable } from 'rxjs/Observable';","","@Injectable()","export class ${CanLoad}Guard implements CanLoad {","\tcanLoad(","\t\t${route}: Route","\t): Observable<boolean> | Promise<boolean> | boolean {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-route-guard-candeactivate","description":"CanDeactivate Guard Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';","import { Observable } from 'rxjs/Observable';","","@Injectable()","export class ${CanDeactivate}Guard implements CanDeactivate<${T}> {","\tcanDeactivate(","\t\tcomponent: ${T},","\t\troute: ActivatedRouteSnapshot,","\t\tstate: RouterStateSnapshot","\t): Observable<boolean> | Promise<boolean> | boolean {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-rx-util","description":"ngRx Util","types":"typescript","body":["/**","\t* This function coerces a string into a string literal type."," * Using tagged union types in TypeScript 2.0, this enables"," * powerful typechecking of our reducers."," * "," * Since every action label passes through this function it"," * is a good place to ensure all of our action labels"," * are unique."," */","","let typeCache: { [label: string]: boolean } = {};","export function type<T>(label: T | ''): T {","\tif (typeCache[<string>label]) {","\t\tthrow new Error(`Action type \"${label}\" is not unique\"`);","\t}","","\ttypeCache[<string>label] = true;","","\treturn <T>label;","}"]},{"prefix":"ng-rx-reducer","description":"ngRx Reducer","types":"typescript","body":["import * as ${class} from '../actions/${class}';","","export interface State {"," \t\t$1","};","","const initialState: State = {","\t\t$2","};","","export function reducer(state = initialState, action: ${class}.Actions ): State {","\tswitch (action.type) {","\t\tcase ${class}.ActionTypes.${TYPE}: {","\t\t\treturn {","\t\t\t\t// return new ${class} state","\t\t\t};","\t\t}","","\t\tdefault: {","\t\t\treturn state;","\t\t}","\t}","}"]},{"prefix":"ng-rx-actions","description":"ngRx Actions class","types":"typescript","body":["import { Action } from '@ngrx/store';","import { ${Class} } from '../models/${class}';","import { type } from '../util';","","/**"," * For each action type in an action group, make a simple"," * enum object for all of this group's action types."," * "," * The 'type' utility function coerces strings into string"," * literal types and runs a simple check to guarantee all"," * action types in the application are unique. "," */","export const ActionTypes = {","  ${VERB}:           type('[${Class} ${Verb}')","};","","/**"," * Every action is comprised of at least a type and an optional"," * payload. Expressing actions as classes enables powerful "," * type checking in reducer functions."," */","export class ${Verb}Action implements Action {","  type = ActionTypes.${VERB};","","  constructor(public payload: ${payloadType}) { }","}","","/**"," * Export a type alias of all actions in this action group"," * so that reducers can easily compose action types"," */","export type Actions","  = ${Verb}Action;","  //| AnotherAction"]},{"prefix":"ng-rx-module","description":"ngRx Root Module","types":"typescript","body":["import { NgModule } from '@angular/core';","import { BrowserModule } from '@angular/platform-browser';","import { RouterModule } from '@angular/router';","import { StoreModule } from '@ngrx/store';","import { RouterStoreModule } from '@ngrx/router-store';","import { StoreDevtoolsModule } from '@ngrx/store-devtools';","import { ${App}Component }  from './${app}.component';","","import { routes } from './routes';","import { reducer } from './reducers';","","@NgModule({","\tdeclarations: [ ${App}Component ],","\timports: [","\t\tBrowserModule,","\t\tRouterModule.forRoot(routes, { useHash: true }),","\t\tStoreModule.provideStore(reducer),","\t\tRouterStoreModule.connectRouter(),","\t\tStoreDevtoolsModule.instrumentOnlyWithExtension(),","\t],","\tproviders: [],","\tbootstrap: [ ${App}Component ]","})","export class ${App}Module {}"]},{"prefix":"ng-rx-action","description":"ngRx Single action","types":"typescript","body":["export const ${ACTION} = '${ACTION}';"]},{"prefix":"ng-test-component-synchronous","description":"TODO","types":"typescript","body":["// synchronous beforeEach","beforeEach(() => {","\tfixture = TestBed.createComponent(${Name}Component);","\tcomp    = fixture.componentInstance;","\t${className}El  = fixture.debugElement.query(By.css('.${className}')); // find the element","","\t// pretend that it was wired to something that supplied a ${className}","\texpected${ClassName} = new ${ClassName}($1);","\tcomp.${className} = expected${ClassName};","\tfixture.detectChanges(); // trigger initial data binding","});$0"]},{"prefix":"ng-test-component-async","description":"TODO","types":"typescript","body":["// async beforeEach","beforeEach( async(() => {","\tTestBed.configureTestingModule({","\t\tdeclarations: [ ${Name}Component ],","\t})","\t.compileComponents(); // compile template and css","}));$0"]},{"prefix":"ng-test-directive","description":"TODO","types":"typescript","body":[""]},{"prefix":"ng-test-service","description":"TODO","types":"typescript","body":[""]},{"prefix":"ng-test-pipe","description":"Test a pipe","types":"typescript","body":["describe('${Name}Pipe', () => {","\tlet pipe = new ${Name}Pipe();","","\tit('transforms \"${input}\" to \"${output}\"', () => {","\t\texpect(pipe.transform('${input}')).toBe('${output}');","\t});","});"]},{"prefix":"ng-if","description":"If directive: *ngIf=\"expression\"","types":"typescript, html","body":["*ngIf=\"${expression}\""]},{"prefix":"ng-if-else","description":"v4: If else directive: *ngIf=\"expression; else\"","types":"typescript, html","body":["<div *ngIf=\"${expression}; else ${elseTemplate}\">","\t$1","</div>","<ng-template #${elseTemplate}>","\t$2","</ng-template>","$0"]},{"prefix":"ng-if-then-else","description":"v4: If then else directive: *ngIf=\"expression; then; else\"","types":"typescript, html","body":["<div *ngIf=\"${expression}; then ${thenTemplate}; else ${elseTemplate}\"></div>","<ng-template #${thenTemplate}>","\t$1","</ng-template>","<ng-template #${elseTemplate}>","\t$2","</ng-template>","$0"]},{"prefix":"ng-for","description":"For-loop directive","types":"typescript, html","body":["*ngFor=\"let ${item} of ${items}\"$0"]},{"prefix":"ng-for-li","description":"For-loop directive with li element","types":"typescript, html","body":["<li *ngFor=\"let ${item} of ${items}\">$0</li>"]},{"prefix":"ng-for-index","description":"For-loop directive with index","types":"typescript, html","body":["*ngFor=\"let ${item} of ${items}; let i=index\"$0"]},{"prefix":"ng-for-trackBy","description":"For-loop directive with trackBy","types":"typescript, html","body":["*ngFor=\"let ${item} of ${items}; trackBy:${item}.id\"$0"]},{"prefix":"ng-class","description":"CSS class","types":"typescript, html","body":["[ngClass]=\"{'${class}': ${true}}\"$0"]},{"prefix":"ng-style","description":"CSS style","types":"typescript, html","body":["[ngStyle]=\"{'${property}': ${expression}}\"$0"]},{"prefix":"ng-switch","description":"Switch template","types":"typescript, html","body":["<span [ngSwitch]=\"\">","<p *ngSwitchCase=\"true\">","","</p>","<p *ngSwitchCase=\"false\">","","</p>","<p *ngSwitchDefault>","","</p>","</span>"]},{"prefix":"ng-property","description":"Property: [property]=\"expression\"","types":"typescript, html","body":["[${property}]=\"${expression}\"$0"]},{"prefix":"ng-event","description":"Event: (event) = \"onEvent()\"","types":"typescript, html","body":["(${event}) = \"on${Event}()\"$0"]},{"prefix":"ng-input","description":"Class Input Property","types":"typescript","body":["@Input() ${class}: ${Class};$0"]},{"prefix":"ng-output","description":"Class Output Event","types":"typescript","body":["@Output() ${methodName} = new EventEmitter<${Class}>();$0"]},{"prefix":"ng-binding-oneway","description":"Property: [property]=\"expression\"","types":"typescript, html","body":["[${property}]=\"${expression}\"$0"]},{"prefix":"ng-binding-twoway","description":"Two-way data binding with the NgModel","types":"typescript, html","body":["[(ngModel)]=\"${Name}\"$0"]},{"prefix":"ng-interpolation","description":"Interpolation: {{ interpolation }}","types":"typescript, html","body":["{{ ${interpolation} }}$0"]},{"prefix":"ng-repeat","description":"Use ngFor instead.","types":"typescript, html","body":["*ngFor=\"let ${item} of ${items}\"$0"]},{"prefix":"ng-click","description":"Click event","types":"typescript, html","body":["(click)=\"${expression}\"$0"]},{"prefix":"ng-controller","description":"Use component instead.","types":"typescript","body":["import { Component, OnInit } from '@angular/core';","","@Component({","\tselector: '${selector}',","\ttemplateUrl: './${name}.component.html',","\tstyleUrls: ['./${name}.component.css']","})","export class ${Name}Component implements OnInit {","\tconstructor() { $0}","","\tngOnInit() { }","}"]},{"prefix":"ng-show","description":"Usage: Bind to the hidden property.","types":"typescript, html","body":["[hidden]=\"!${expression}\"$0"]},{"prefix":"ng-hide","description":"Usage: Bind to the hidden property.","types":"typescript, html","body":["[hidden]=\"${expression}\"$0"]},{"prefix":"ng-href","description":"Usage: Bind to the href property.","types":"typescript, html","body":["[href]=\"${url}\"$0"]},{"prefix":"ng-src","description":"Usage: Bind to the src property.","types":"typescript, html","body":["[src]=\"${url}\"$0"]},{"prefix":"ng-orderBy","description":"For performance reasons, no comparable pipe exists in Angular 2. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.","types":"typescript, html","body":["$0"]},{"prefix":"ng-filter","description":"For performance reasons, no comparable pipe exists in Angular 2. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.","types":"typescript, html","body":["$0"]},{"prefix":"ng-button-submit","description":"A submit button element with a click event","types":"typescript, html","body":["<button type=\"submit\">${Submit}</button>","$0"]},{"prefix":"ng-button","description":"A button element with a click event","types":"typescript, html","body":["<button (click)=\"${onClick()}\">${name}</button>","$0"]},{"prefix":"ng-import","description":"import module or component from path;","types":"typescript, html","body":["import ${module or component} from '${path}';","$0"]},{"prefix":"ng-http-get","description":"Http observable get request","types":"typescript, html","body":["this.http.get('${url}')","\t.map((res: Response) => {","\t\tres.json();","})$0"]},{"prefix":"ng-http","description":"Http observable get & post request","types":"typescript, html","body":["get${Type}(): Observable<I${Type}[]> {","\treturn this.http.get(${name})","\t\t.map((res: Response) => <I${Type}[]>res.json())","\t\t.catch(this.handleError);","}","","add${Type}(${name}: string): Observable<I${Type}> {","\tlet body = JSON.stringify({ ${name} });","\tlet headers = new Headers({ 'Content-Type': 'application/json'});","\tlet options = new RequestOptions({ headers: headers });","","\treturn this.http.post(this.${url}, body, options)","\t\t.map(this.handleResponse)","\t.catch(this.handleError);","}","private handleError(error: Response) {","\tconsole.error(error);","\treturn Observable.throw(error.json().error || 'Server error');","}","$0"]},{"prefix":"ng-debug","description":"pre obj pipe json","types":"typescript, html","body":["<pre>{{ ${obj} | json }}</pre>$0"]},{"prefix":"ng-debug-async","description":"pre obj pipe async pipe json","types":"typescript, html","body":["<pre>{{ ${obj} | async | json }}</pre>$0"]},{"prefix":"ng-fx-import","description":"Flex Layout Import","types":"typescript, html","body":["import { FlexLayoutModule } from '@angular/flex-layout';","// Add ${FlexLayoutModule.forRoot()} to the @NgModule imports section"]},{"prefix":"ng-fx-row","description":"Flex Layout Row","types":"typescript, html","body":["<div fxLayout=\"row\" fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"ng-fx-layout","description":"Flex Layout Property","types":"typescript, html","body":["fxLayout=\"row\"$0"]},{"prefix":"ng-fx-layout-align","description":"Flex Layout Align Property","types":"typescript, html","body":["fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\"$0"]},{"prefix":"ng-fx-layout-gap","description":"Flex Layout Gap Property","types":"typescript, html","body":["fxLayoutGap=\"${gap}px\"$0"]},{"prefix":"ng-fx-row-reverse","description":"Flex Layout Reverse Row","types":"typescript, html","body":["<div fxLayout=\"row-reverse\" fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"ng-fx-col","description":"Flex Layout Column","types":"typescript, html","body":["<div fxLayout=\"column\" fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"ng-fx-col-reverse","description":"Flex Layout Reverse Column","types":"typescript, html","body":["<div fxLayout=\"column-reverse\" fxLayoutAlign=\"${start|center|end|space-around|space-between} ${start|center|end|stretch}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"ng-fx-item","description":"Flex Layout Item","types":"typescript, html","body":["<div fxFlex=\"${value}%\">","\t$0","</div>"]},{"prefix":"ng-fx-item-offset","description":"Flex Layout Item with fxFlexOffset","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexOffset=\"${offset}px\">","\t$0","</div>"]},{"prefix":"ng-fx-item-order","description":"Flex Layout Item with fxFlexOrder","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexOrder=\"${order}\">","\t$0","</div>"]},{"prefix":"ng-fx-item-align","description":"Flex Layout Item with fxFlexAlign","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexAlign=\"${start|baseline|center|end}\">","\t$0","</div>"]},{"prefix":"ng-fx-item-fill","description":"Flex Layout Item with fxFlexFill","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexFill>","\t$0","</div>"]},{"prefix":"m-toolbar","description":"Material toolbar","types":"typescript, html","body":["<md-toolbar>","\t<span>${FirstRow}</span>","</md-toolbar>$0"]},{"prefix":"m-toolbar-row","description":"Material toolbar row","types":"typescript, html","body":["<md-toolbar-row>","\t<span>${FirstRow}</span>","</md-toolbar-row>$0"]},{"prefix":"m-toolbar-multiRow","description":"Material Toolbar with multiple rows","types":"typescript, html","body":["<md-toolbar>","\t<span>${FirstRow}</span>","\t<md-toolbar-row>","\t\t<span>${SecondRow}</span>","\t</md-toolbar-row>","\t<md-toolbar-row>","\t\t<span>${ThirdRow}</span>","\t</md-toolbar-row>","</md-toolbar>$0"]},{"prefix":"m-icon","description":"Material Icon","types":"typescript, html","body":["<md-icon>${icon_name}</md-icon>$0"]},{"prefix":"m-button","description":"Rectangular Material button w/ no elevation.","types":"typescript, html","body":["<button md-button>${text}</button>$0"]},{"prefix":"m-button-raised","description":"Rectangular Material button w/ elevation.","types":"typescript, html","body":["<button md-raised-button>${text}</button>$0"]},{"prefix":"m-button-icon","description":"Circular Material button with a transparent background","types":"typescript, html","body":["<button md-icon-button>%{text}</button>$0"]},{"prefix":"m-button-fab","description":"Circular button w/ elevation.","types":"typescript, html","body":["<button md-fab><md-icon>${icon_name}</md-icon></button>$0"]},{"prefix":"m-button-fab-mini","description":"Small circular button w/ elevation.","types":"typescript, html","body":["<button md-fab-mini><md-icon>${icon_name}</md-icon></button>$0"]},{"prefix":"m-card","description":"Material Basic Card","types":"typescript, html","body":["<md-card>","\t$1","</md-card>$0"]},{"prefix":"m-radiobutton","description":"Material Radio Button","types":"typescript, html","body":["<md-radio-group>","\t<md-radio-button value=\"${value1}\">${Option1}</md-radio-button>","\t<md-radio-button value=\"${value2}\">${Option2}</md-radio-button>","</md-radio-group>$0"]},{"prefix":"m-radiobutton-option","description":"Material Radio Button Option","types":"typescript, html","body":["<md-radio-button value=\"${value}\">${Option}</md-radio-button>$0"]},{"prefix":"m-checkbox","description":"Material Checkbox","types":"typescript, html","body":["<md-checkbox>${text}</md-checkbox>$0"]},{"prefix":"m-datepicker","description":"Material Datepicker","types":"typescript, html","body":["<md-input-container>","\t<input mdInput [mdDatepicker]=\"${picker}\" placeholder=\"${title}\">","\t\t<button mdSuffix [mdDatepickerToggle]=\"${picker}\"></button>","\t</md-input-container>","<md-datepicker #${picker}></md-datepicker>$0"]},{"prefix":"m-input","description":"Material Input Textbox","types":"typescript, html","body":["<md-input-container>","\t<input mdInput placeholder=\"${label}\" value=\"${value}\">","</md-input-container>$0"]},{"prefix":"m-select","description":"Material Select","types":"typescript, html","body":["<md-select placeholder=\"${Placeholder}\" [(ngModel)]=\"selectedValue\" name=\"${item}\">","\t<md-option *ngFor=\"let ${item} of ${items}\" [value]=\"${item}.value\">","\t\t{{${item}.viewValue}}","\t</md-option>","</md-select>$0"]},{"prefix":"m-icon-svg","description":"Material SVG Icon","types":"typescript, html","body":["<md-icon svgIcon=\"${src}\"></md-icon>$0"]},{"prefix":"m-slide-toggle","description":"Material Slide toggle","types":"typescript, html","body":["<md-slide-toggle>${text}</md-slide-toggle>$0"]},{"prefix":"m-slider","description":"Material Slider","types":"typescript, html","body":["<md-slider min=\"${min}\" max=\"${max}\" step=\"${step}\" value=\"${value}\"></md-slider>$0"]},{"prefix":"m-list","description":"Material List","types":"typescript, html","body":["<md-list>","\t<md-list-item>${item}</md-list-item>$1","</md-list>$0"]},{"prefix":"m-list-ngfor","description":"Material List ngFor","types":"typescript, html","body":["<md-list>","\t<md-list-item *ngFor=\"let ${item} of ${items}\">{{ ${item} }}</md-list-item>$1","</md-list>$0"]},{"prefix":"m-list-item","description":"Material List Item","types":"typescript, html","body":["<md-list-item>${item}</md-list-item>$0"]},{"prefix":"m-tab-group","description":"Material Tab Group","types":"typescript, html","body":["<md-tab-group>","\t<md-tab label=\"${TabHeader1}\">$1</md-tab>","\t<md-tab label=\"${TabTabHeader2}\">$2</md-tab>","</md-tab-group>$0"]},{"prefix":"m-tab","description":"Material Tab","types":"typescript, html","body":["<md-tab label=\"${TabHeader}\">$1</md-tab>$0"]},{"prefix":"m-tooltip","description":"Material Tooltip","types":"typescript, html","body":["mdTooltip=\"${text}\"$0"]},{"prefix":"m-tooltip-position","description":"Material Tooltip position","types":"typescript, html","body":["[mdTooltipPosition]=\"${above|below|left|right|before|after}\"$0"]},{"prefix":"m-tooltip-with-position","description":"Material Tooltip with position","types":"typescript, html","body":["mdTooltip=\"${text}\" [mdTooltipPosition]=\"${above|below|left|right|before|after}\"$0"]},{"prefix":"m-table","description":"Material Table","types":"typescript, html","body":["<md-table #table [dataSource]=\"${dataSource}\">","\t<ng-container cdkColumnDef=\"${column}\">","\t\t<md-header-cell *cdkHeaderCellDef> ${header} </md-header-cell>","\t\t<md-cell *cdkCellDef=\"let row\"> {{row.${column}}} </md-cell>","\t</ng-container>","</md-table>$0"]},{"prefix":"m-table-column","description":"Material Table Column","types":"typescript, html","body":["<ng-container cdkColumnDef=\"${column}\">","\t<md-header-cell *cdkHeaderCellDef> ${header} </md-header-cell>","\t<md-cell *cdkCellDef=\"let row\"> {{row.${column}}} </md-cell>","</ng-container>$0"]},{"prefix":"m-grid-list","description":"Material Grid List","types":"typescript, html","body":["<md-grid-list cols=\"${cols}\" rowHeight=\"${height}px\">","\t<md-grid-tile","\t\t*ngFor=\"let ${tile} of ${tiles}\"","\t\t[colspan]=\"${tile}.cols\"","\t\t[rowspan]=\"${tile}.rows\"","\t\t{{${tile}.text}}","\t</md-grid-tile>","</md-grid-list>$0"]},{"prefix":"m-paginator","description":"Material Paginator","types":"typescript, html","body":["<md-paginator [length]=\"${length}\"","\t[pageSize]=\"${pageSize}\"","\t[pageSizeOptions]=\"${pageSizeOptions}\"","\t(page)=\"pageEvent = $${event}\">","</md-paginator>$0"]}]
