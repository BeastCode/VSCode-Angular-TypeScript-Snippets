[{"prefix":"ng-component","description":"Component with template and style urls","types":"typescript","body":["import { Component, OnInit } from '@angular/core';","","@Component({","\tselector: '${1:app}-${2:name}',","\ttemplateUrl: './${2:name}.component.html',","\tstyleUrls: ['./${2:name}.component.${3|scss,less,css|}']","})","export class ${4:Name}Component implements OnInit {","\tconstructor($5) { }","","\tngOnInit(): void {${6: }}","}","$0"]},{"prefix":"ng-component-inline","description":"Component with inline Template and Styles","types":"typescript","body":["import { Component, OnInit } from '@angular/core';","","@Component({","\tselector: '${1:app}-${2:name}',","\ttemplate: `${3}`,","\tstyles: [`${4}`]","})","export class ${5:Name}Component implements OnInit {","\tconstructor($6) { }","","\tngOnInit(): void {${7: }}","}","$0"]},{"prefix":"ng-component-value-accessor","description":"Angular Component With NG_VALUE_ACCESSOR","types":"typescript","body":["import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';","import { Component, Input, OnInit, forwardRef } from '@angular/core';","","export const ${1:COMPONENT_NAME}_VALUE_ACCESSOR: any = {","\tprovide: NG_VALUE_ACCESSOR,","\tuseExisting: forwardRef(() => ${2:ComponentName}Component),","\tmulti: true","};","","@Component({","\tselector: '${3:selector-name}',","\ttemplateUrl: './${4:name}.component.html',","\tstyleUrls: ['./${4:name}.component.css'],","\tproviders: [${1:COMPONENT_NAME}_VALUE_ACCESSOR]","})","export class ${2:ComponentName}Component implements OnInit, ControlValueAccessor {","","\tprivate _value: any;","","\tset value(value: any) {","\t\tthis._value = value;","\t\tthis.notifyValueChange();","\t}","","\tget value(): any {","\t\treturn this._value;","\t}","","\tonChange: (value) => {};","\tonTouched: () => {};","","\tconstructor() { }","","\tnotifyValueChange(): void {","\t\tif (this.onChange) {","\t\t\tthis.onChange(this.value);","\t\t}","\t}","","\tngOnInit(): void {","\t\t","\t}","","\twriteValue(obj: any): void {","\t\tthis._value = obj;","\t}","","\tregisterOnChange(fn: any): void {","\t\tthis.onChange = fn;","\t}","","\tregisterOnTouched(fn: any): void {","\t\tthis.onTouched = fn;","\t}","","\tsetDisabledState(isDisabled: boolean): void {","\t}","}","$0"]},{"prefix":"ng-validator","description":"Angular validator snippet","types":"typescript","body":["import { Directive } from '@angular/core';","import { Validator, NG_VALIDATORS, FormControl } from '@angular/forms';","","@Directive({","\tselector: '[${validatorName}][ngModel]',","\tproviders: [","\t\t{ provide: NG_VALIDATORS, useExisting: ${className}, multi: true }","\t]","})","","export class ${className} implements Validator {","\tvalidate(c: FormControl): { [key: string]: any } {","\t\tif (valid) {","\t\t\treturn null;","\t\t}","","\t\treturn {","\t\t\t${validatorName}: {","\t\t\t\tvalid: false","\t\t\t}","\t\t};","\t}","}"]},{"prefix":"ng-directive","description":"Directive template","types":"typescript","body":["import { Directive } from '@angular/core';","","@Directive({","\tselector: '${1:app}-${2:Name}',","})","export class ${2:Name}Directive {${3: }}$0"]},{"prefix":"ng-directive-css","description":"CSS directive","types":"typescript","body":["import { Directive, ElementRef, Input } from '@angular/core';","","@Directive({","\tselector: '[${1:app}-${2:Name}]',","})","export class ${2:Name}Directive {","\tconstructor(private elementRef: ElementRef) {}","","\tprivate ${3:name}(${4:value}: string) {","\t\tthis.elementRef.nativeElement.style.${5:proptery} = ${6:value};","\t}","}$0"]},{"prefix":"ng-directive-attribute","description":"Attribute directive","types":"typescript","body":["import { Directive } from '@angular/core';","","@Directive({","\tselector: '[${1:app}-${2:Name}]',","})","export class ${2:Name}Directive {${4: }}$0"]},{"prefix":"ng-service","description":"Basic service","types":"typescript","body":["import { Injectable } from '@angular/core';","","@Injectable()","export class ${Name}Service {","$0}"]},{"prefix":"ng-bootstraping","description":"Bootstraping example","types":"typescript","body":["import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';","import { enableProdMode } from '@angular/core';","import { AppModule } from './app/app.module';","","if (environment.production) {","\tenableProdMode();","}","platformBrowserDynamic().bootstrapModule(AppModule)","\t.then(success => console.log(`Bootstrap success`))","\t.catch(err => console.error(err));","","// Move to separate file","export const environment = {","\tproduction: false","};"]},{"prefix":"ng-module","description":"Feature Module","types":"typescript","body":["import { NgModule } from '@angular/core';","import { CommonModule } from '@angular/common';","","@NgModule({","\tdeclarations: [],","\timports: [ CommonModule ],","\texports: [],","\tproviders: [],","})","export class ${Feature}Module {}"]},{"prefix":"ng-module-root","description":"App root module","types":"typescript","body":["import { NgModule } from '@angular/core';","import { BrowserModule } from '@angular/platform-browser';","import { ${App}Component }  from './${app}.component';","","@NgModule({","\tdeclarations: [ ${App}Component ],","\timports: [ BrowserModule ],","\tproviders: [],","\tbootstrap: [ ${App}Component ]","})","export class ${App}Module {}"]},{"prefix":"ng-material-module","description":"App Material Module","types":"typescript","body":["import {NgModule} from '@angular/core';","import {","\tMatAutocompleteModule,","\tMatBadgeModule,","\tMatBottomSheetModule,","\tMatButtonModule,","\tMatButtonToggleModule,","\tMatCardModule,","\tMatCheckboxModule,","\tMatChipsModule,","\tMatDatepickerModule,","\tMatDialogModule,","\tMatDividerModule,","\tMatExpansionModule,","\tMatFormFieldModule,","\tMatGridListModule,","\tMatIconModule,","\tMatInputModule,","\tMatListModule,","\tMatMenuModule,","\tMatNativeDateModule,","\tMatPaginatorModule,","\tMatProgressBarModule,","\tMatProgressSpinnerModule,","\tMatRadioModule,","\tMatRippleModule,","\tMatSelectModule,","\tMatSidenavModule,","\tMatSliderModule,","\tMatSlideToggleModule,","\tMatSnackBarModule,","\tMatSortModule,","\tMatStepperModule,","\tMatTableModule,","\tMatTabsModule,","\tMatToolbarModule,","\tMatTooltipModule,","\tMatTreeModule,","} from '@angular/material';","import {A11yModule} from '@angular/cdk/a11y';","import {BidiModule} from '@angular/cdk/bidi';","import {ObserversModule} from '@angular/cdk/observers';","import {OverlayModule} from '@angular/cdk/overlay';","import {PlatformModule} from '@angular/cdk/platform';","import {PortalModule} from '@angular/cdk/portal';","import {ScrollDispatchModule} from '@angular/cdk/scrolling';","import {CdkStepperModule} from '@angular/cdk/stepper';","import {CdkTableModule} from '@angular/cdk/table';","import {CdkTreeModule} from '@angular/cdk/tree';","import {DragDropModule} from '@angular/cdk/drag-drop';","","/**"," * NgModule that includes all Material modules.","*/","@NgModule({","\texports: [","\t\t// CDK","\t\tA11yModule,","\t\tBidiModule,","\t\tObserversModule,","\t\tOverlayModule,","\t\tPlatformModule,","\t\tPortalModule,","\t\tScrollDispatchModule,","\t\tCdkStepperModule,","\t\tCdkTableModule,","\t\tCdkTreeModule,","\t\tDragDropModule","\t\t// Material","\t\tMatAutocompleteModule,","\t\tMatBadgeModule,","\t\tMatBottomSheetModule,","\t\tMatButtonModule,","\t\tMatButtonToggleModule,","\t\tMatCardModule,","\t\tMatCheckboxModule,","\t\tMatChipsModule,","\t\tMatDatepickerModule,","\t\tMatDialogModule,","\t\tMatDividerModule,","\t\tMatExpansionModule,","\t\tMatFormFieldModule,","\t\tMatGridListModule,","\t\tMatIconModule,","\t\tMatInputModule,","\t\tMatListModule,","\t\tMatMenuModule,","\t\tMatNativeDateModule,","\t\tMatPaginatorModule,","\t\tMatProgressBarModule,","\t\tMatProgressSpinnerModule,","\t\tMatRadioModule,","\t\tMatRippleModule,","\t\tMatSelectModule,","\t\tMatSidenavModule,","\t\tMatSliderModule,","\t\tMatSlideToggleModule,","\t\tMatSnackBarModule,","\t\tMatSortModule,","\t\tMatStepperModule,","\t\tMatTableModule,","\t\tMatTabsModule,","\t\tMatToolbarModule,","\t\tMatTooltipModule,","\t\tMatTreeModule,","\t]","})","export class MaterialModule {}"]},{"prefix":"ng-pipe","description":"Pipe template","types":"typescript","body":["import { Pipe, PipeTransform } from '@angular/core';","","@Pipe({name: '${name}'})","export class ${Name}Pipe implements PipeTransform {","\ttransform(value: any): any {","\t\t$0","\t}","}"]},{"prefix":"ng-pipe-example","description":"Angular pipe example","types":"typescript","body":["import { Pipe, PipeTransform } from '@angular/core';","/*"," * Raise the value exponentially"," * Takes an exponent argument that defaults to 1."," * Usage:"," *   value | exponentialStrength:exponent"," * Example:"," *   {{ 2 |  exponentialStrength:10}}"," *   formats to: 1024","*/","@Pipe({name: 'exponentialStrength'})","export class ExponentialStrengthPipe implements PipeTransform {","\ttransform(value: number, exponent: string): number {","\t\tlet exp = parseFloat(exponent);","\t\treturn Math.pow(value, isNaN(exp) ? 1 : exp);","\t}","}"]},{"prefix":"ng-pipe-uppercase","description":"Uppercase pipe","types":"typescript, html","body":["{{ ${variable} | uppercase }}$0"]},{"prefix":"ng-pipe-lowercase","description":"Lowercase pipe","types":"typescript, html","body":["{{ ${variable} | lowercase }}$0"]},{"prefix":"ng-pipe-titlecase","description":"v4: TitlecaseÂ pipe","types":"typescript, html","body":["{{ ${variable} | titlecase }}$0"]},{"prefix":"ng-pipe-date","description":"Date pipe - Default format: 09/15/1971","types":"typescript, html","body":["{{ ${variable} | date }}$0"]},{"prefix":"ng-pipe-date-custom","description":"Date pipe - Format: \"MM/dd/yy\" = 09/15/71","types":"typescript, html","body":["{{ ${variable} | date:\"MM/dd/yy\" }}$0"]},{"prefix":"ng-pipe-date-short","description":"Short date pipe - Format: 09/15/1971","types":"typescript, html","body":["{{ ${variable} | date:shortDate }}$0"]},{"prefix":"ng-pipe-date-full","description":"Full date pipe - Format: Wednesday, September 15, 1971","types":"typescript, html","body":["{{ ${variable} | date:fullDate }}$0"]},{"prefix":"ng-pipe-percent","description":"Percent pipe - Usage: number_expression &#x7c; percent[:digitInfo]","types":"typescript, html","body":["{{ ${variable} | percent:${digitInfo} }}$0"]},{"prefix":"ng-pipe-decimal","description":"Decimal pipe - Usage: number_expression &#x7c; decimal[:digitInfo]","types":"typescript, html","body":["{{ ${variable} | decimal:${digitInfo} }}$0"]},{"prefix":"ng-pipe-slice","description":"Slice pipe - Usage: array_or_string_expression &#x7c; slice:start[:end]","types":"typescript, html","body":["{{ ${variable} | slice:${start}:${end} }}$0"]},{"prefix":"ng-pipe-currency","description":"Currency pipe - Usage: money &#x7c; currency:'EUR'","types":"typescript, html","body":["{{ ${variable} | currency:'${CURRENCY}' }}$0"]},{"prefix":"ng-pipe-json","description":"Json pipe - Usage: object &#x7c; json","types":"typescript, html","body":["{{ ${object} | json }}$0"]},{"prefix":"ng-pipe-async","description":"Async pipe - Usage: observable_or_promise_expression &#x7c; async","types":"typescript, html","body":["{{ ${observable} | async }}$0"]},{"prefix":"ng-ngOnChanges","description":"Lifecycle hook: Called before any other lifecycle hook","types":"typescript","body":["ngOnChanges(changes: SimpleChanges): void {","\t//Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.","\t//Add '${implements OnChanges}' to the class.","\t$0","}"]},{"prefix":"ng-onInit","description":"Lifecycle hook: Called after the constructor","types":"typescript","body":["ngOnInit(): void {","\t//Called after the constructor, initializing input properties, and the first call to ngOnChanges.","\t//Add 'implements OnInit' to the class.","\t$0","}"]},{"prefix":"ng-doCheck","description":"Lifecycle hook: Called every time that the input properties of a component or a directive are checked","types":"typescript","body":["ngDoCheck(): void {","\t//Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.","\t//Add 'implements DoCheck' to the class.","\t$0","}"]},{"prefix":"ng-afterContentInit","description":"Lifecycle hook: Called after ngOnInit when the component's or directive's content has been initialized","types":"typescript","body":["ngAfterContentInit(): void {","\t//Called after ngOnInit when the component's or directive's content has been initialized.","\t//Add 'implements AfterContentInit' to the class.","\t$0","}"]},{"prefix":"ng-afterContentChecked","description":"Lifecycle hook: Called after every check of the component's or directive's content","types":"typescript","body":["ngAfterContentChecked(): void {","\t//Called after every check of the component's or directive's content.","\t//Add 'implements AfterContentChecked' to the class.","\t$0","}"]},{"prefix":"ng-afterViewInit","description":"Lifecycle hook: Called after ngAfterContentInit when the component's view has been initialized","types":"typescript","body":["ngAfterViewInit(): void {","\t//Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.","\t//Add 'implements AfterViewInit' to the class.","\t$0","}"]},{"prefix":"ng-afterViewChecked","description":"Lifecycle hook: Called after every check of the component's view. Applies to components only","types":"typescript","body":["ngAfterViewChecked(): void {","\t//Called after every check of the component's view. Applies to components only.","\t//Add 'implements AfterViewChecked' to the class.","\t$0","}"]},{"prefix":"ng-onDestroy","description":"Lifecycle hook: Called before the instance is destroyed","types":"typescript","body":["ngOnDestroy(): void {","\t//Called once, before the instance is destroyed.","\t//Add 'implements OnDestroy' to the class.","\t$0","}"]},{"prefix":"wat","description":"A lightning talk by Gary Bernhardt from CodeMash 2012. ng-wat talk by Shai Reznik in 2015","types":"typescript","body":["`M.`MMMm                 ,M' .M.    MMMMMMM MMMMMMMMM"," `M.`MMMm               ,M' .MMM.   MMMMMMM MMMMMMMMM","  `M.`MMMm             ,M' :MMMMM.        M MMMM     ","   `M.`MMMm     .m    ,M' . `MMMMM.       M MMMM     ","    `M.`MMMm    MMm  ,M' .M. `MMMMM.      M MMMM     ","     `M.`MMMm .`MMMm,M' .M`M. `MMMMM.     M MMMM     ","      `M.`MMMmM.`MMMM' .M' `M. `MMMMM.    M MMMM     ","       `M.`MMM`M.`MM' .M'   `M. `MMMMM.   M MMMM     ","        `M.`M' `M,`' .MMMMMMMMM. `MMMMM.  M MMMM     ","         `M.`   `M' .M'       `M. `MMMMM. M MMMM     "]},{"prefix":"ng-conf","description":"The World's Original Angular Conference","types":"typescript","body":["                     ,//@@@.","                .///////@@@@@@@&.","           ,////////////@@@@@@@@@@@@@/","      ./////////////////#@@@@@@@@@@@@@@@@@,"," ,/////////////////.         ,&@@@@@@@@@@@@@@@@#","/////////////.                     %@@@@@@@@@@@@@","/////////.                             .%@@@@@@@@","//////.                                   /@@@@@@","///////     @@%     .@@/    .@@@@@@/      %@@@@@@",".//////     @@@@(   .@@/   @@@%. ,@@@#    @@@@@@&",".//////     @@%@@@  .@@/  &@@             @@@@@@("," //////     @@# ,@@@.@@/  @@@   &@@@@@.   @@@@@@."," //////,    @@#   %@@@@/  ,@@@    *@@#   ,@@@@@@"," //////.    @@#     @@@/    @@@@@@@@,    #@@@@@@"," ,//////                                 @@@@@@&"," .//////                                 @@@@@@/","  //////.      @@@  @@@  @@  @ @@@@     .@@@@@@.","  //////,     @    @   @ @ @ @ @==      (@@@@@@","  .//////      @@@  @@@  @  @@ @        &@@@@@@","  .///////.                           %@@@@@@@&","   ///////////                    ,@@@@@@@@@@@(","     ,///////////,             #@@@@@@@@@@@&","        .///////////.       &@@@@@@@@@@@%","           ./////////////@@@@@@@@@@@@*","              ./////////@@@@@@@@@@,","                  ./////@@@@@@%","                     .//@@@#","","     The World's Original Angular Conference","      May 1stâ3rd 2019 Salt Lake City, Utah"]},{"prefix":"ng-girls","description":"Angular Girls","types":"typescript","bodypcoming Events:","","                    Oct 20th 2018, Seattle","                    Oct 20th 2018, Krakow","                    Nov 5th 2018, London","                      Nov 17th, Warsaw"]},{"prefix":"ng-router","description":"Router template","types":"typescript","body":["import { Routes, RouterModule } from '@angular/router';","import { NgModule } from '@angular/core';","","import { ${Home}Component } from './';","import { ${Name2}Component } from './';","import { ${Name3}Component } from './';","import { ${Name4}Component } from './';","import { PageNotFoundComponent } from './';","","const routes: Routes = [","\t{ path: '', component: ${Home}Component },","\t{ path: '${path2}', component: ${Name2}Component },","\t{ path: '${path3}', component: ${Name3}Component },","\t{ path: '${path4}', component: ${Name4}Component },","\t{ path: '**', component: PageNotFoundComponent },","","\t//{ path: 'path/:routeParam', component: MyComponent },","\t//{ path: 'staticPath', component: ... },","\t//{ path: '**', component: ... },","\t//{ path: 'oldPath', redirectTo: '/staticPath' },","\t//{ path: ..., component: ..., data: { message: 'Custom' }","];","","@NgModule({","\timports: [RouterModule.forChild(routes)],","\texports: [RouterModule]","})","export class ${Feature}RoutingModule {}","$0"]},{"prefix":"ng-router-appmodule","description":"Routes to include in root module","types":"typescript","body":["import { NgModule } from '@angular/core';","import { RouterModule, Routes } from '@angular/router';","","const routes: Routes = [","\t{ path: '', component: ${Home}Component },","\t{ path: '${path}', component: ${Feature}Component },","\t{ path: '**', component: PageNotFoundComponent },","];","","@NgModule({","\timports: [RouterModule.forRoot(routes)],","\texports: [RouterModule]","})","export class AppRoutingModule {}","$0"]},{"prefix":"ng-router-featuremodule","description":"Routes to include in a feature module","types":"typescript","body":["import { NgModule } from '@angular/core';","import { RouterModule, Routes } from '@angular/router';","import { CommonModule } from '@angular/common';","","const routes: Routes = [","\t{ path: '${path}', component: ${Feature}Component }","];","","@NgModule({","\timports: [CommonModule, RouterModule.forChild(routes)],","\texports: [RouterModule]","})","export class ${Feature}RoutingModule {}","$0"]},{"prefix":"ng-router-link","description":"Router link","types":"typescript, html","body":["<a [routerLink]=\"[ '/${path}', ${routeParam} ]\">${name}</a>$0"]},{"prefix":"ng-router-attribute","description":"Router link","types":"typescript, html","body":["[routerLink]=\"[ '/${path}', ${routeParam} ]\"$0"]},{"prefix":"ng-router-linkActive","description":"Router active link","types":"typescript, html","body":["<a [routerLink]=\"[ '/${path}' ]\" routerLinkActive=\"active\">${name}</a>$0"]},{"prefix":"ng-router-outlet","description":"Router outlet element","types":"typescript, html","body":["<router-outlet></router-outlet>","$0"]},{"prefix":"ng-router-outlet-name","description":"Router outlet element with name","types":"typescript, html","body":["<router-outlet name=\"${name}\"></router-outlet>","$0"]},{"prefix":"ng-route-guard-canactivate","description":"CanActivate Guard Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';","import { Observable } from 'rxjs';","","@Injectable()","export class ${CanActivate}Guard implements CanActivate {","\tcanActivate(","\t\troute: ActivatedRouteSnapshot,","\t\tstate: RouterStateSnapshot","\t): Observable<boolean> | Promise<boolean> | boolean {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-route-guard-canactivatechild","description":"CanActivateChild Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';","import { Observable } from 'rxjs';","","@Injectable()","export class ${CanActivateChild}Guard implements CanActivateChild {","\tcanActivateChild(","\t\troute: ActivatedRouteSnapshot,","\t\tstate: RouterStateSnapshot","\t): Observable<boolean> | Promise<boolean> | boolean {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-route-guard-resolve","description":"Resolve Guard Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';","import { Observable } from 'rxjs';","","@Injectable()","export class ${Resolve}Guard implements Resolve<${T}> {","\tresolve(","\t\troute: ActivatedRouteSnapshot,","\t\tstate: RouterStateSnapshot","\t): Observable<any> | Promise<any> | any {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-route-guard-canload","description":"CanLoad Guard Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { CanLoad, Route } from '@angular/router';","import { Observable } from 'rxjs';","","@Injectable()","export class ${CanLoad}Guard implements CanLoad {","\tcanLoad(","\t\t${route}: Route","\t): Observable<boolean> | Promise<boolean> | boolean {","\t\treturn true;$0","\t}","}",""]},{"prefix":"ng-route-guard-candeactivate","description":"CanDeactivate Guard Route","types":"typescript, html","body":["import { Injectable } from '@angular/core';","import { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';","import { Observable } from 'rxjs';","","@Injectable()","export class ${CanDeactivate}Guard implements CanDeactivate<${T}> {","\tcanDeactivate(","\t\tcomponent: ${T},","\t\troute: ActivatedRouteSnapshot,","\t\tstate: RouterStateSnapshot","\t): Observable<boolean> | Promise<boolean> | boolean {","\t\treturn true;$0","\t}","}"]},{"prefix":"ngrx-util","description":"ngRx Util","types":"typescript","body":["/**","\t* This function coerces a string into a string literal type."," * Using tagged union types in TypeScript 2.0, this enables"," * powerful type checking of our reducers."," * "," * Since every action label passes through this function it"," * is a good place to ensure all of our action labels"," * are unique."," */","","let typeCache: { [label: string]: boolean } = {};","export function type<T>(label: T | ''): T {","\tif (typeCache[<string>label]) {","\t\tthrow new Error(`Action type \"${label}\" is not unique\"`);","\t}","","\ttypeCache[<string>label] = true;","","\treturn <T>label;","}"]},{"prefix":"ngrx-reducer","description":"ngRx Reducer","types":"typescript","body":["import * as ${class} from '../actions/${class}';","","export interface State {"," \t\t$1","};","","const initialState: State = {","\t\t$2","};","","export function reducer(state = initialState, action: ${class}.Actions ): State {","\tswitch (action.type) {","\t\tcase ${class}.ActionTypes.${TYPE}: {","\t\t\treturn {","\t\t\t\t// return new ${class} state","\t\t\t};","\t\t}","","\t\tdefault: {","\t\t\treturn state;","\t\t}","\t}","}"]},{"prefix":"ngrx-actions","description":"ngRx Actions class","types":"typescript","body":["import { Action } from '@ngrx/store';","","/**"," * For each action type in an action group, make a simple"," * enum object for all of this group's action types."," */","export enum ${Class}ActionTypes {","\t${Verb1} = '[${Class}] ${Verb1}',","\t${Verb2} = '[${Class}] ${Verb2}'","};","","/**"," * Every action is comprised of at least a type and an optional"," * payload. Expressing actions as classes enables powerful "," * type checking in reducer functions."," */","export class ${Verb1} implements Action {","\treadonly type = ${Class}ActionTypes.${Verb1};","","\tconstructor(public payload: ${payloadType}) { }","}","","export class ${Verb2} implements Action {","\treadonly type = ${Class}ActionTypes.${Verb2};","","\tconstructor(public payload: ${payloadType2}) { }","}","","/**"," * Export a type alias of all actions in this action group"," * so that reducers can easily compose action types"," */","export type ${Class}Actions","\t\t\t\t\t\t= ${Verb1}","\t\t\t\t\t\t| ${Verb2};",""]},{"prefix":"ngrx-module","description":"ngRx Root Module","types":"typescript","body":["import { NgModule } from '@angular/core';","import { BrowserModule } from '@angular/platform-browser';","import { RouterModule } from '@angular/router';","import { StoreModule } from '@ngrx/store';","import { RouterStoreModule } from '@ngrx/router-store';","import { StoreDevtoolsModule } from '@ngrx/store-devtools';","import { ${App}Component }  from './${app}.component';","","import { routes } from './routes';","import { reducer } from './reducers';","","@NgModule({","\tdeclarations: [ ${App}Component ],","\timports: [","\t\tBrowserModule,","\t\tRouterModule.forRoot(routes, { useHash: true }),","\t\tStoreModule.provideStore(reducer),","\t\tRouterStoreModule.connectRouter(),","\t\tStoreDevtoolsModule.instrumentOnlyWithExtension(),","\t],","\tproviders: [],","\tbootstrap: [ ${App}Component ]","})","export class ${App}Module {}"]},{"prefix":"ngrx-action-const","description":"ngRx Single action","types":"typescript","body":["export const ${ACTION} = '[${NameSpace}] ${ACTION}';","$0"]},{"prefix":"ngrx-action-creator","description":"ngRx Single action with const","types":"typescript","body":["export const ${ACTION} = '[${NameSpace}] ${ACTION}';","$0","export class ${Class} implements Action {","\treadonly type = ${ACTION};","","\tconstructor(public payload: ${payloadType}) { }","}",""]},{"prefix":"ngrx-action-creator-enum","description":"ngRx Single action creator for enum","types":"typescript","body":["export class ${Verb} implements Action {","\treadonly type = ${Class}ActionTypes.${Verb};","","\tconstructor(public payload: ${payloadType}) { }","}"]},{"prefix":"ngrx-actiontypes-enum","description":"ngRx enum action types","types":"typescript","body":["export enum ${Class}ActionTypes {","\t${Verb1} = '[${Class}] ${Verb1}',","\t${Verb2} = '[${Class}] ${Verb2}'","}"]},{"prefix":"ngrx-actiontype-enum","description":"ngRx enum action type","types":"typescript","body":["${Verb} = '[${Class}] ${Verb}'$0"]},{"prefix":"ngrx-effect","description":"ngRx Effect","types":"typescript","body":["import { Injectable } from '@angular/core';","import { Observable } from 'rxjs';","import { Action } from '@ngrx/store';","import { Actions, Effect } from '@ngrx/effects';","","@Injectable()","export class ${Name}Effects {","\t@Effect() ${name}$: Observable<Action> = this.actions$.ofType('${ACTIONTYPE}')$1;","","\tconstructor(","\t\tprivate ${actions}$: Actions","\t) {}","}"]},{"prefix":"ngxs-state","description":"Ngxs State","types":"typescript","body":["import { State } from '@ngxs/store';","import { ${Name}StateModel } from './${name}.model';","","@State<${Name}StateModel>({","\tdefaults: {","\t}","})","export class ${Name}State {}","$0"]},{"prefix":"ngxs-action","description":"Ngxs Action","types":"typescript","body":["export class ${Action} {","\tstatic readonly type = '[${FileName}] ${Action}]';","}","$0"]},{"prefix":"ngxs-action-payload","description":"Ngxs Action with Payload","types":"typescript","body":["export class ${Action} {","\tstatic readonly type = '[${FileName}] ${Action}]';","\tconstructor(public readonly payload?: ${type:any}) {}","}","$0"]},{"prefix":"ngxs-state-model","description":"Ngxs State Model","types":"typescript","body":["export interface ${Name}StateModel {$1","}","$0"]},{"prefix":"ngxs-store","description":"Ngxs Store","types":"typescript","body":["NgxsModule.forRoot([","\t${Name}State","])","NgxsReduxDevtoolsPluginModule.forRoot(),","NgxsLoggerPluginModule.forRoot()$0"]},{"prefix":"ngxs-store-import","description":"Ngxs Import Store","types":"typescript","body":["import { NgxsModule } from '@ngxs/store';","import { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';","import { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';","import { ${Name}State } from './${path}/${name}.state';","$0"]},{"prefix":"ngxs-select","description":"Ngxs Select","types":"typescript","body":["import { Select } from '@ngxs/store';","","import { ${Name} State } from './${name}.state';","import { ${action} } from './${action}.actions';","","@Component({ ... })","export class ${Name}Component {"," // Reads the name of the store from the store class"," @Select(${Name}State) ${action}$: Observable<${type}>;","}","$0"]},{"prefix":"t-component-synchronous","description":"Test Synchronous Component","types":"typescript","body":["// synchronous beforeEach","beforeEach(() => {","\tfixture = TestBed.createComponent(${Name}Component);","\tcomp    = fixture.componentInstance;","\t${className}El  = fixture.debugElement.query(By.css('.${className}')); // find the element","","\t// pretend that it was wired to something that supplied a ${className}","\texpected${ClassName} = new ${ClassName}($1);","\tcomp.${className} = expected${ClassName};","\tfixture.detectChanges(); // trigger initial data binding","});","$0"]},{"prefix":"t-component-async","description":"Test Async Component","types":"typescript","body":["// async beforeEach","beforeEach( async(() => {","\tTestBed.configureTestingModule({","\t\tdeclarations: [ ${Name}Component ],","\t})","\t.compileComponents(); // compile template and css","}));","$0"]},{"prefix":"t-directive","description":"Test a directive","types":"typescript","body":["describe('${Name}Directive', () => {","\tit('should create an instance', () => {","\t\tconst directive = new ${Name}Directive();","\t\texpect(directive).toBeTruthy();","\t});","});","$0"]},{"prefix":"t-service","description":"Test a service","types":"typescript","body":["import { TestBed, inject } from '@angular/core/testing';","import { ${Name}Service } from './${name}.service';","","describe('${Name}Service', () => {","\tbeforeEach(() => {","\t\tTestBed.configureTestingModule({","\t\t\tproviders: [${Name}Service]","\t\t});","\t});","it('should be created', inject([${Name}Service], (service: ${Name}Service) => {","\texpect(service).toBeTruthy();","\t}));","});","$0"]},{"prefix":"t-pipe","description":"Test a pipe","types":"typescript","body":["describe('${Name}Pipe', () => {","\tlet pipe = new ${Name}Pipe();","\tit('transforms \"${input}\" to \"${output}\"', () => {","\t\texpect(pipe.transform('${input}')).toBe('${output}');","\t});","});","$0"]},{"prefix":"ng-model","description":"ngModel directive: [(ngModel)]=\"name\"","types":"typescript, html","body":["[(ngModel)]=\"${name}\"$0"]},{"prefix":"ng-if","description":"If directive: *ngIf=\"expression\"","types":"typescript, html","body":["*ngIf=\"${expression}\"$0"]},{"prefix":"ng-if-else","description":"v4: If else directive: *ngIf=\"expression; else\"","types":"typescript, html","body":["<ng-container *ngIf=\"${expression}; else ${elseTemplate}\">","\t$1","</ng-container>","<ng-template #${elseTemplate}>","\t$2","</ng-template>","$0"]},{"prefix":"ng-if-then-else","description":"v4: If then else directive: *ngIf=\"expression; then; else\"","types":"typescript, html","body":["<ng-container *ngIf=\"${expression}; then ${thenTemplate}; else ${elseTemplate}\"></ng-container>","<ng-template #${thenTemplate}>","\t$1","</ng-template>","<ng-template #${elseTemplate}>","\t$2","</ng-template>","$0"]},{"prefix":"ng-for","description":"For-loop directive","types":"typescript, html","body":["*ngFor=\"let ${item} of ${items}\"$0"]},{"prefix":"ng-for-li","description":"For-loop directive with li element","types":"typescript, html","body":["<li *ngFor=\"let ${item} of ${items}\">$0</li>"]},{"prefix":"ng-for-index","description":"For-loop directive with index","types":"typescript, html","body":["*ngFor=\"let ${item} of ${items}; let i=index\"$0"]},{"prefix":"ng-for-trackBy","description":"For-loop directive with trackBy","types":"typescript, html","body":["*ngFor=\"let ${item} of ${items}; trackBy:${item}.id\"$0"]},{"prefix":"ng-class","description":"CSS class","types":"typescript, html","body":["[ngClass]=\"{'${class}': ${true}}\"$0"]},{"prefix":"ng-style","description":"CSS style","types":"typescript, html","body":["[ngStyle]=\"{'${property}': ${expression}}\"$0"]},{"prefix":"ng-switch","description":"Switch template","types":"typescript, html","body":["<span [ngSwitch]=\"\">","<p *ngSwitchCase=\"true\">","","</p>","<p *ngSwitchCase=\"false\">","","</p>","<p *ngSwitchDefault>","","</p>","</span>"]},{"prefix":"ng-property","description":"Property: [property]=\"expression\"","types":"typescript, html","body":["[${property}]=\"${expression}\"$0"]},{"prefix":"ng-event","description":"Event: (event) = \"onEvent()\"","types":"typescript, html","body":["(${event}) = \"on${Event}()\"$0"]},{"prefix":"ng-input","description":"Class Input Property","types":"typescript","body":["@Input() ${class}: ${Class};$0"]},{"prefix":"ng-output","description":"Class Output Event","types":"typescript","body":["@Output() ${methodName} = new EventEmitter<${Class}>();$0"]},{"prefix":"ng-binding-oneway","description":"Property: [property]=\"expression\"","types":"typescript, html","body":["[${property}]=\"${expression}\"$0"]},{"prefix":"ng-binding-twoway","description":"Two-way data binding with the NgModel","types":"typescript, html","body":["[(ngModel)]=\"${Name}\"$0"]},{"prefix":"ng-interpolation","description":"Interpolation: {{ interpolation }}","types":"typescript, html","body":["{{ ${interpolation} }}$0"]},{"prefix":"ng-repeat","description":"Use ngFor instead.","types":"typescript, html","body":["*ngFor=\"let ${item} of ${items}\"$0"]},{"prefix":"ng-click","description":"Click event","types":"typescript, html","body":["(click)=\"${expression}\"$0"]},{"prefix":"ng-controller","description":"Use component instead.","types":"typescript","body":["import { Component, OnInit } from '@angular/core';","","@Component({","\tselector: '${selector}',","\ttemplateUrl: './${name}.component.html',","\tstyleUrls: ['./${name}.component.css']","})","export class ${Name}Component implements OnInit {","\tconstructor() { $1}","","\tngOnInit(): void { $2}","}","$0"]},{"prefix":"ng-show","description":"Usage: Bind to the hidden property.","types":"typescript, html","body":["[hidden]=\"!${expression}\"$0"]},{"prefix":"ng-hide","description":"Usage: Bind to the hidden property.","types":"typescript, html","body":["[hidden]=\"${expression}\"$0"]},{"prefix":"ng-href","description":"Usage: Bind to the href property.","types":"typescript, html","body":["[href]=\"${url}\"$0"]},{"prefix":"ng-src","description":"Usage: Bind to the src property.","types":"typescript, html","body":["[src]=\"${url}\"$0"]},{"prefix":"ng-orderBy","description":"For performance reasons, no comparable pipe exists in Angular 2. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.","types":"typescript, html","body":["$0"]},{"prefix":"ng-filter","description":"For performance reasons, no comparable pipe exists in Angular 2. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.","types":"typescript, html","body":["$0"]},{"prefix":"ng-button-submit","description":"A submit button element with a click event","types":"typescript, html","body":["<button type=\"submit\">${Submit}</button>","$0"]},{"prefix":"ng-button","description":"A button element with a click event","types":"typescript, html","body":["<button (click)=\"${onClick()}\">${name}</button>","$0"]},{"prefix":"ng-import","description":"import module or component from path;","types":"typescript, html","body":["import { ${2:moduleOrComponent} } from '${1:path}';","$0"]},{"prefix":"ng-http-get","description":"Http observable get request","types":"typescript, html","body":["this.http.get('${url}')","\t.map((res: Response) => {","\t\tres.json();","})$0"]},{"prefix":"ng-httpClient-get","description":"HttpClient observable get request","types":"typescript, html","body":["this.http.get('${url}')$0"]},{"prefix":"ng-http-get-post","description":"Http observable get & post request","types":"typescript, html","body":["get${Type}(): Observable<I${Type}[]> {","\treturn this.http.get(${name})","\t\t.map((res: Response) => <I${Type}[]>res.json())","\t\t.catch(this.handleError);","}","","add${Type}(${name}: string): Observable<I${Type}> {","\tlet body = JSON.stringify({ ${name} });","\tlet headers = new Headers({ 'Content-Type': 'application/json'});","\tlet options = new RequestOptions({ headers: headers });","","\treturn this.http.post(this.${url}, body, options)","\t\t.map(this.handleResponse)","\t.catch(this.handleError);","}","private handleError(error: Response) {","\tconsole.error(error);","\treturn Observable.throw(error.json().error || 'Server error');","}","$0"]},{"prefix":"ng-debug","description":"pre obj pipe json","types":"typescript, html","body":["<pre>{{ ${obj} | json }}</pre>$0"]},{"prefix":"ng-debug-async","description":"pre obj pipe async pipe json","types":"typescript, html","body":["<pre>{{ ${obj} | async | json }}</pre>$0"]},{"prefix":"fx-import","description":"Flex Layout Import","types":"typescript, html","body":["import { FlexLayoutModule } from '@angular/flex-layout';","// Add ${FlexLayoutModule.forRoot()} to the @NgModule imports section"]},{"prefix":"fx-row","description":"Flex Layout Row","types":"typescript, html","body":["<div fxLayout=\"row\" fxLayoutAlign=\"${1|start,center,end,space-around,space-between|} ${2|start,center,end,stretch|}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"fx-layout","description":"Flex Layout Property","types":"typescript, html","body":["fxLayout=\"row\"$0"]},{"prefix":"fx-layout-align","description":"Flex Layout Align Property","types":"typescript, html","body":["fxLayoutAlign=\"${1|start,center,end,space-around,space-between|} ${2|start,center,end,stretch|}\"$0"]},{"prefix":"fx-layout-gap","description":"Flex Layout Gap Property","types":"typescript, html","body":["fxLayoutGap=\"${gap}px\"$0"]},{"prefix":"fx-row-reverse","description":"Flex Layout Reverse Row","types":"typescript, html","body":["<div fxLayout=\"row-reverse\" fxLayoutAlign=\"${1|start,center,end,space-around,space-between|} ${2|start,center,end,stretch|}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"fx-col","description":"Flex Layout Column","types":"typescript, html","body":["fxLayout=\"column\" fxLayoutAlign=\"${1|start,center,end,space-around,space-between|} ${2|start,center,end,stretch|}\" fxLayoutGap=\"${gap}px\">$0"]},{"prefix":"fx-col-element","description":"Flex Layout Column with Element","types":"typescript, html","body":["<${1:div} fxLayout=\"column\" fxLayoutAlign=\"${2:|start,center,end,space-around,space-between|} ${4:|start,center,end,stretch|}\" fxLayoutGap=\"${gap}px\">","\t$0","</${1:div}>"]},{"prefix":"fx-col-reverse","description":"Flex Layout Reverse Column","types":"typescript, html","body":["<div fxLayout=\"column-reverse\" fxLayoutAlign=\"${1|start,center,end,space-around,space-between|} ${2|start,center,end,stretch|}\" fxLayoutGap=\"${gap}px\">","\t$0","</div>"]},{"prefix":"fx-item","description":"Flex Layout Item","types":"typescript, html","body":["<div fxFlex=\"${value}%\">","\t$0","</div>"]},{"prefix":"fx-item-offset","description":"Flex Layout Item with fxFlexOffset","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexOffset=\"${offset}px\">","\t$0","</div>"]},{"prefix":"fx-item-order","description":"Flex Layout Item with fxFlexOrder","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexOrder=\"${order}\">","\t$0","</div>"]},{"prefix":"fx-item-align","description":"Flex Layout Item with fxFlexAlign","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexAlign=\"${1|start,baseline,center,end|}\">","\t$0","</div>"]},{"prefix":"fx-item-fill","description":"Flex Layout Item with fxFlexFill","types":"typescript, html","body":["<div fxFlex=\"${value}%\" fxFlexFill>","\t$0","</div>"]},{"prefix":"m-drag-drop-box","description":"Material drag drop box","types":"typescript, html","body":["<div class=\"$1{drag-drop-box}\" cdkDrag>","</div>$0"]},{"prefix":"m-toolbar","description":"Material toolbar","types":"typescript, html","body":["<mat-toolbar>","\t<span>${FirstRow}</span>","</mat-toolbar>$0"]},{"prefix":"m-toolbar-row","description":"Material toolbar row","types":"typescript, html","body":["<mat-toolbar-row>","\t<span>${FirstRow}</span>","</mat-toolbar-row>$0"]},{"prefix":"m-toolbar-multiRow","description":"Material Toolbar with multiple rows","types":"typescript, html","body":["<mat-toolbar>","\t<span>${FirstRow}</span>","\t<mat-toolbar-row>","\t\t<span>${SecondRow}</span>","\t</mat-toolbar-row>","\t<mat-toolbar-row>","\t\t<span>${ThirdRow}</span>","\t</mat-toolbar-row>","</mat-toolbar>$0"]},{"prefix":"m-icon-fontawesome","description":"Material Font Awesome Icon","types":"typescript, html","body":["<mat-icon mat-font-icon=\"fa-${icon}\" class=\"fa\"></mat-icon>$0"]},{"prefix":"m-button","description":"Rectangular Material button w/ no elevation.","types":"typescript, html","body":["<button mat-button>${text}</button>$0"]},{"prefix":"m-button-raised","description":"Rectangular Material button w/ elevation.","types":"typescript, html","body":["<button mat-raised-button>${text}</button>$0"]},{"prefix":"m-button-icon","description":"Circular Material button with a transparent background","types":"typescript, html","body":["<button mat-icon-button><mat-icon>${icon_name}</mat-icon></button>$0"]},{"prefix":"m-button-fab","description":"Circular button w/ elevation.","types":"typescript, html","body":["<button mat-fab><mat-icon>${icon_name}</mat-icon></button>$0"]},{"prefix":"m-button-fab-mini","description":"Small circular button w/ elevation.","types":"typescript, html","body":["<button mat-mini-fab><mat-icon>${icon_name}</mat-icon></button>$0"]},{"prefix":"m-button-toggle","description":"Material toggle button","types":"typescript, html","body":["<mat-button-toggle>${text}</mat-button-toggle>$0"]},{"prefix":"m-card","description":"Material Basic Card","types":"typescript, html","body":["<mat-card>","\t$1","</mat-card>$0"]},{"prefix":"m-card-full","description":"Material Card","types":"typescript, html","body":["<mat-card>","\t<mat-card-header>","\t\t<mat-card-title>${title}</mat-card-title>","\t\t<mat-card-subtitle>${subtitle}</mat-card-subtitle>","\t</mat-card-header>","\t<mat-card-content>","\t$1","\t</mat-card-content>","\t<mat-card-actions>","\t\t<button mat-button>${Ok}</button>","\t</mat-card-actions>","</mat-card>$0"]},{"prefix":"m-radiobutton","description":"Material Radio Button","types":"typescript, html","body":["<mat-radio-group>","\t<mat-radio-button value=\"${value1}\">${Option1}</mat-radio-button>","\t<mat-radio-button value=\"${value2}\">${Option2}</mat-radio-button>","</mat-radio-group>$0"]},{"prefix":"m-radiobutton-option","description":"Material Radio Button Option","types":"typescript, html","body":["<mat-radio-button value=\"${value}\">${Option}</mat-radio-button>$0"]},{"prefix":"m-checkbox-ngmodel","description":"Material Checkbox ngmodel","types":"typescript, html","body":["<mat-checkbox [(ngModel)]=\"${property.checkedOrUnchecked}\">${text}</mat-checkbox>$0"]},{"prefix":"m-checkbox","description":"Material Checkbox","types":"typescript, html","body":["<mat-checkbox>${text}</mat-checkbox>$0"]},{"prefix":"m-datepicker","description":"Material Datepicker","types":"typescript, html","body":["<mat-form-field>","\t<input matInput [matDatepicker]=\"${picker}\" placeholder=\"${title}\">","\t<mat-datepicker-toggle matSuffix [for]=\"${picker}\"></mat-datepicker-toggle>","\t<button matSuffix [matDatepickerToggle]=\"${picker}\"></button>","\t<mat-datepicker #${picker}></mat-datepicker>","</mat-form-field>","$0"]},{"prefix":"m-input","description":"Material Input Textbox","types":"typescript, html","body":["<mat-form-field>","\t<input matInput placeholder=\"${label}\" value=\"${value}\">","</mat-form-field>$0"]},{"prefix":"m-chip-list","description":"Material Chip List","types":"typescript, html","body":["<mat-chip-list>","\t<mat-chip>${text}</mat-chip>","</mat-chip-list>$0"]},{"prefix":"m-chip-list-stacked","description":"Material Chip Stacked List","types":"typescript, html","body":["<mat-chip-list class=\"mat-chip-list-stacked\">","\t<mat-chip>${text}</mat-chip>","</mat-chip-list>$0"]},{"prefix":"m-chip","description":"Material Chip","types":"typescript, html","body":["<mat-chip>${text}</mat-chip>$0"]},{"prefix":"m-select","description":"Material Select","types":"typescript, html","body":["<mat-select placeholder=\"${Placeholder}\" [(ngModel)]=\"selectedValue\" name=\"${item}\">","\t<mat-option *ngFor=\"let ${item} of ${items}\" [value]=\"${item}.value\">","\t\t{{${item}.viewValue}}","\t</mat-option>","</mat-select>$0"]},{"prefix":"m-icon-svg","description":"Material SVG Icon","types":"typescript, html","body":["<mat-icon svgIcon=\"${src}\"></mat-icon>$0"]},{"prefix":"m-icon","description":"Material Icon","types":"typescript, html","body":["<mat-icon>${icon}</mat-icon>$0"]},{"prefix":"m-icon-badge","description":"Material Icon with a Badge","types":"typescript, html","body":["<mat-icon","\tcolor=\"primary\"","\tmatBadge=\"${number}\"","\tmatBadgePosition=\"${2|above,below|} ${3|after,before|}\"","\tmatBadgeColor=\"accent\">","\t\t${icon}","</mat-icon>$0"]},{"prefix":"m-slide-toggle","description":"Material Slide toggle","types":"typescript, html","body":["<mat-slide-toggle>${text}</mat-slide-toggle>$0"]},{"prefix":"m-slider","description":"Material Slider","types":"typescript, html","body":["<mat-slider min=\"${min}\" max=\"${max}\" step=\"${step}\" value=\"${value}\"></mat-slider>$0"]},{"prefix":"m-slider-vertical","description":"Material Vertical Slider","types":"typescript, html","body":["<mat-slider vertical min=\"${min}\" max=\"${max}\" step=\"${step}\" value=\"${value}\"></mat-slider>$0"]},{"prefix":"m-slider-thumbLabel","description":"Material Slider thumbLabel","types":"typescript, html","body":["<mat-slider thumbLabel tickInterval=\"${interval}\"></mat-slider>$0"]},{"prefix":"m-slider-tickInterval","description":"Material Slider tickInterval","types":"typescript, html","body":["<mat-slider step=\"${step}\" tickInterval=\"${interval}\"></mat-slider>$0"]},{"prefix":"m-slider-tickInterval-auto","description":"Material Slider tickInterval Auto","types":"typescript, html","body":["<mat-slider tickInterval=\"auto\"></mat-slider>$0"]},{"prefix":"m-list","description":"Material List","types":"typescript, html","body":["<mat-list>","\t<mat-list-item>${item}</mat-list-item>$1","</mat-list>$0"]},{"prefix":"m-list-ngfor","description":"Material List ngFor","types":"typescript, html","body":["<mat-list>","\t<mat-list-item *ngFor=\"let ${item} of ${items}\">{{ ${item} }}</mat-list-item>$1","</mat-list>$0"]},{"prefix":"m-list-item","description":"Material List Item","types":"typescript, html","body":["<mat-list-item>${item}</mat-list-item>$0"]},{"prefix":"m-tab-group","description":"Material Tab Group","types":"typescript, html","body":["<mat-tab-group>","\t<mat-tab label=\"${TabHeader1}\">$1</mat-tab>","\t<mat-tab label=\"${TabTabHeader2}\">$2</mat-tab>","</mat-tab-group>$0"]},{"prefix":"m-tab","description":"Material Tab","types":"typescript, html","body":["<mat-tab label=\"${TabHeader}\">$1</mat-tab>$0"]},{"prefix":"m-tooltip","description":"Material Tooltip","types":"typescript, html","body":["matTooltip=\"${text}\"$0"]},{"prefix":"m-tooltip-position","description":"Material Tooltip position","types":"typescript, html","body":["[matTooltipPosition]=\"${1|above,below,left,right,before,after|}\"$0"]},{"prefix":"m-tooltip-with-position","description":"Material Tooltip with position","types":"typescript, html","body":["matTooltip=\"${text}\" [matTooltipPosition]=\"${1|above,below,left,right,before,after|}\"$0"]},{"prefix":"m-table","description":"Material Table","types":"typescript, html","body":["<table mat-table #table [dataSource]=\"${dataSource}\">","\t<ng-container cdkColumnDef=\"${column}\">","\t\t<th mat-header-cell *cdkHeaderCellDef> ${header} </th>","\t\t<td mat-cell *cdkCellDef=\"let row\"> {{row.${column}}} </td>","\t</ng-container>","\t<tr mat-header-row *matHeaderRowDef=\"['${column}']\"></tr>","\t<tr mat-row *matRowDef=\"let row; columns: ['${column}'];\"></tr>","</table>$0"]},{"prefix":"m-table-column","description":"Material Table Column","types":"typescript, html","body":["<ng-container cdkColumnDef=\"${column}\">","\t<th mat-header-cell *cdkHeaderCellDef> ${header} </th>","\t<td mat-cell *cdkCellDef=\"let row\"> {{row.${column}}} </td>","</ng-container>$0"]},{"prefix":"m-grid-list","description":"Material Grid List","types":"typescript, html","body":["<mat-grid-list cols=\"${cols}\" rowHeight=\"${height}px\">","\t<mat-grid-tile","\t\t*ngFor=\"let ${tile} of ${tiles}\"","\t\t[colspan]=\"${tile}.cols\"","\t\t[rowspan]=\"${tile}.rows\"","\t\t{{${tile}.text}}>","\t</mat-grid-tile>","</mat-grid-list>$0"]},{"prefix":"m-paginator","description":"Material Paginator","types":"typescript, html","body":["<mat-paginator [length]=\"${length}\"","\t[pageSize]=\"${pageSize}\"","\t[pageSizeOptions]=\"${pageSizeOptions}\"","\t(page)=\"pageEvent = $${event}\">","</mat-paginator>$0"]},{"prefix":"m-spinner","description":"Material Determinate Spinner","types":"typescript, html","body":["<mat-spinner","\t[value]=\"${value}\">","</mat-spinner>$0"]},{"prefix":"m-progress-bar-indeterminate","description":"Material indeterminate Progress Bar","types":"typescript, html","body":["<mat-progress-bar","\tmode=\"indeterminate\">","</mat-progress-bar>$0"]},{"prefix":"m-progress-bar-query","description":"Material Query Progress Bar","types":"typescript, html","body":["<mat-progress-bar","\tmode=\"query\">","</mat-progress-bar>$0"]},{"prefix":"m-progress-bar-buffer","description":"Material Buffer Progress Bar","types":"typescript, html","body":["<mat-progress-bar","\tmode=\"buffer\"","\t[color]=\"${color}\"","\t[value]=\"${value}\"","\t[bufferValue]=\"${bufferValue}\">","</mat-progress-bar>$0"]},{"prefix":"m-progress-bar","description":"Material Determinate Progress Bar","types":"typescript, html","body":["<mat-progress-bar","\tmode=\"determinate\"","\t[value]=\"${value}\">","</mat-progress-bar>$0"]},{"prefix":"m-expansion-panel","description":"Material Expansion Panel","types":"typescript, html","body":["<mat-expansion-panel>","\t<mat-expansion-panel-header>","\t\t${title}","\t</mat-expansion-panel-header>","\t${content}","</mat-expansion-panel>$0"]},{"prefix":"m-accordion>","description":"Material Accordion","types":"typescript, html","body":["<mat-accordion>","\t<mat-expansion-panel>","\t\t<mat-expansion-panel-header>","\t\t\t${title}","\t\t</mat-expansion-panel-header>","\t\t${content}","\t</mat-expansion-panel>","\t<mat-expansion-panel>","\t\t<mat-expansion-panel-header>","\t\t\t${title2}","\t\t</mat-expansion-panel-header>","\t\t${content2}","\t</mat-expansion-panel>","</mat-accordion>$0"]},{"prefix":"m-stepper-vertical","description":"Material Vertical Stepper","types":"typescript, html","body":["<mat-vertical-stepper>","\t<mat-step label=\"${label1}\">","\t\t$1","\t</mat-step>","\t<mat-step label=\"${label2}\">","\t\t$2","\t</mat-step>","</mat-vertical-stepper>$0"]},{"prefix":"m-stepper-horizontal","description":"Material Horizontal Stepper","types":"typescript, html","body":["<mat-horizontal-stepper>","\t<mat-step label=\"${label1}\">","\t\t$1","\t</mat-step>","\t<mat-step label=\"${label2}\">","\t\t$2","\t</mat-step>","</mat-horizontal-stepper>$0"]},{"prefix":"m-step","description":"Material Vertical Stepper","types":"typescript, html","body":["<mat-step label=\"${label}\">","\t$1","</mat-step>","$0"]},{"prefix":"m-spinner-indeterminate","description":"Material Indeterminate Spinner","types":"typescript, html","body":["<mat-spinner","\t[mode]=\"indeterminate\">","</mat-spinner>$0"]},{"prefix":"m-divider","description":"Material Divider","types":"typescript, html","body":["<mat-divider>","</mat-divider>$0"]},{"prefix":"m-divider-inset","description":"Material Inset Divider","types":"typescript, html","body":["<mat-divider","\t[inset]=\"true\">","</mat-divider>$0"]},{"prefix":"m-divider-vertical","description":"Material Vertical Divider","types":"typescript, html","body":["<mat-divider","\t[vertical]=\"true\">","</mat-divider>$0"]},{"prefix":"rx-import-observable","description":"RxJS Import Observable","types":"typescript, javascript","body":["import { Observable } from 'rxjs';","$0"]},{"prefix":"rx-import-subject","description":"RxJS Import Subject","types":"typescript, javascript","body":["import { Subject } from 'rxjs';","$0"]},{"prefix":"rx-import-operator","description":"RxJS Import an Operator","types":"typescript, javascript","body":["import { ${1:switchMap} } from 'rxjs/operators';","$0"]},{"prefix":"rx-mergeMap","description":"RxJS MergeMap Example","types":"typescript, javascript","body":["getItems(ids: number[]): Observable<Item> {","\treturn from(ids).pipe(","\t\tmergeMap(id => <Observable<Item>> this.httpClient.get(`item/${id}`))","\t);","}","$0"]},{"prefix":"t-describe","description":"Describe","types":"typescript","body":["describe('${1:Description}', () => {","\t$0","});"]},{"prefix":"t-describe-it","description":"Describe, It & Expect","types":"typescript","body":["describe('${1:Description}', () => {","\tit('${2:Test}', () => {","\t\texpect($3).toBe($4);","\t});","});","$0"]},{"prefix":"t-ite","description":"It and Expect","types":"typescript","body":["it('${1:Test}', () => {","\texpect($2).toBe$3($4);","});","$0"]},{"prefix":"t-it","description":"It","types":"typescript","body":["it('${1:Test}', () => {","\t$2","});","$0"]},{"prefix":"t-beforeEach","description":"beforeEach","types":"typescript","body":["beforeEach(function() {","\t$1","});","$0"]},{"prefix":"t-afterEach","description":"afterEach","types":"typescript","body":["afterEach(function() {","\t$1","});","$0"]},{"prefix":"t-beforeAll","description":"beforeAll","types":"typescript","body":["beforeAll(function() {","\t$1","});","$0"]},{"prefix":"t-afterAll","description":"afterAll","types":"typescript","body":["afterAll(function() {","\t$1","});","$0"]},{"prefix":"e-tb","description":"Expect toBe","types":"typescript","body":["expect($1).toBe($2);","$0"]},{"prefix":"e-ntb","description":"Expect Not toBe","types":"typescript","body":["expect($1).not.toBe($2);","$0"]},{"prefix":"e-tbf","description":"Expect toBe Falsy","types":"typescript","body":["expect($1).toBeFalsy();","$0"]},{"prefix":"e-ntbf","description":"Expect not toBe Falsy","types":"typescript","body":["expect($1).not.toBeFalsy();","$0"]},{"prefix":"e-tbt","description":"Expect toBe Truthy","types":"typescript","body":["expect($1).toBeTruthy();","$0"]},{"prefix":"e-ntbt","description":"Expect not toBe Truthy","types":"typescript","body":["expect($1).not.toBeTruthy();","$0"]},{"prefix":"e-tbd","description":"Expect toBe Defined","types":"typescript","body":["expect($1).toBeDefined();","$0"]},{"prefix":"e-ntbd","description":"Expect not toBe Defined","types":"typescript","body":["expect($1).not.toBeDefined();","$0"]},{"prefix":"e-tbu","description":"Expect toBe Undefined","types":"typescript","body":["expect($1).toBeUndefined();","$0"]},{"prefix":"e-ntbu","description":"Expect not toBe Undefined","types":"typescript","body":["expect($1).not.toBeUndefined();","$0"]},{"prefix":"e-tm","description":"Expect toMatch","types":"typescript","body":["expect($1).toMatch(\"$2\");","$0"]},{"prefix":"e-ntm","description":"Expect Not toMatch","types":"typescript","body":["expect($1).not.toMatch(\"$2\");","$0"]},{"prefix":"e-tmr","description":"Expect toMatch regex","types":"typescript","body":["expect($1).toMatch(\\$2\\);","$0"]},{"prefix":"e-ntmr","description":"Expect Not toMatch regex","types":"typescript","body":["expect($1).not.toMatch(\\$2\\);","$0"]},{"prefix":"e-tm","description":"Expect toMatchObject","types":"typescript","body":["expect($1).toMatchObject($2);","$0"]},{"prefix":"e-tc","description":"Expect toContain","types":"typescript","body":["expect($1).toContain($2);","$0"]},{"prefix":"e-tbn","description":"Expect toBeNull","types":"typescript","body":["expect($1).toBeNull();","$0"]},{"prefix":"e-ntbn","description":"Expect Not toBeNull","types":"typescript","body":["expect($1).not.toBeNull();","$0"]},{"prefix":"e-tbgt","description":"Expect toBeGreaterThan","types":"typescript","body":["expect($1).toBeGreaterThan($2);","$0"]},{"prefix":"e-tbgtoe","description":"Expect toBeGreaterThanOrEqual","types":"typescript","body":["expect($1).toBeGreaterThanOrEqual($2);","$0"]},{"prefix":"e-tbltoe","description":"Expect toBeLessThanOrEqual","types":"typescript","body":["expect($1).toBeLessThanOrEqual($2);","$0"]},{"prefix":"e-tblt","description":"Expect toBeLessThan","types":"typescript","body":["expect($1).toBeLessThan($2);","$0"]},{"prefix":"e-tbio","description":"Expect toBeInstanceOf","types":"typescript","body":["expect($1).toBeInstanceOf($2);","$0"]},{"prefix":"e-tbct","description":"Expect toBeCloseTo","types":"typescript","body":["expect($1).toBeCloseTo($2,$3);","$0"]},{"prefix":"e-thbc","description":"Expect toHaveBeenCalled","types":"typescript","body":["expect($1).toHaveBeenCalled();","$0"]},{"prefix":"e-nthbc","description":"Expect Not toHaveBeenCalled","types":"typescript","body":["expect($1).not.toHaveBeenCalled();","$0"]},{"prefix":"e-thrt","description":"Expect toHaveReturnedTimes(2)","types":"typescript","body":["expect($1).toHaveReturnedTimes($2);","$0"]},{"prefix":"e-thrw","description":"Expect toHaveLastReturnedWith(value)","types":"typescript","body":["expect($1).toHaveLastReturnedWith($2);","$0"]},{"prefix":"e-thnrw","description":"Expect toHaveNthReturnedWith(nthCall, value)","types":"typescript","body":["expect($1).toHaveNthReturnedWith($2, $3);","$0"]},{"prefix":"e-thlrw","description":"Expect toHaveLastReturnedWith(value)","types":"typescript","body":["expect($1).toHaveLastReturnedWith($2);","$0"]},{"prefix":"e-thbcw","description":"Expect toHaveBeenCalledWith","types":"typescript","body":["expect($1).toHaveBeenCalledWith($2);","$0"]},{"prefix":"e-thp","description":"Expect toHaveProperty","types":"typescript","body":["expect($1).toHaveProperty($2);","$0"]},{"prefix":"e-tse","description":"Expect toStrictEqual","types":"typescript","body":["expect($1).toStrictEqual($2);","$0"]},{"prefix":"e-atbr","description":"ExpectAsync toBeResolved","types":"typescript","body":["expectAsync($1).toBeResolved();","$0"]},{"prefix":"e-tms","description":"Jest Expect toMatchSnapshot","types":"typescript","body":["expect($1).toMatchSnapshot();","$0"]},{"prefix":"ng-http-interceptor","description":"Intercept an outgoing HttpRequest and optionally transform it or the response.","types":"typescript","body":["import { Injectable } from '@angular/core';","import {","\tHttpEvent, HttpInterceptor, HttpHandler, HttpRequest","} from '@angular/common/http';","","@Injectable()","export class ${1:Name}Interceptor implements HttpInterceptor {","\tintercept(req: HttpRequest<any>, next: HttpHandler) {","\t\treturn next.handle(req);","\t}","}"]},{"prefix":"sw-register","description":"Register Service Worker","types":"typescript, javascript","body":["if ('serviceWorker' in navigator) {","\twindow.addEventListener('load', () => {","\tnavigator.serviceWorker.register('/sw.js');","});","}$0"]},{"prefix":"sw-register-and-check","description":"Register Service Worker and Check","types":"typescript, javascript","body":["if ('serviceWorker' in navigator) {","if('serviceWorker' in window.navigator) {","\twindow.addEventListener('load', () => {","\t\twindow.navigator.serviceWorker.register('/sw.js', { scope: '/' }).then((registration) => {","\t\t\tconsole.log('ServiceWorker registration successful with scope: ', registration.scope);","\t\t}).catch((error) => {","\t\t\tconsole.error('ServiceWorker registration failed: ', error);","\t\t});","\t});","}$0"]},{"prefix":"nx-cheatsheet","description":"Nx Cheat Sheet","types":"typescript","body":["/*","  Install Nx","  npm install -g @nrwl/schematics","  or","  yarn global add @nrwl/schematics","","  Generate a Project","  create-nx-workspace ${1:<appname>}","","  Generate an Nx Application","  ng generate app ${1:<appname>}","","  Generate an Nx Library","  ng generate lib ${2:<libname>}","","","  Command Line Options for App","  â-routing  (adds routing)","  â-directory <path>","  ","","  Command Line Options for Lib","  â-routing","  â-parent-module <path> and <module>","  â-lazy","  â-ngmodule   (generate a regular lib instead of an ng module","  â-directory <dirname>","","  Serve an Nx Application","  ng serve --app=${1:<appname>}","","","  Examples","","  Generate an Application","  ng generate app ${1:<appname>} --routing","","  Generate a lazy loaded Angular module lib with routing","  ng generate lib ${2:<libname>} --routing --lazy --parentModule=apps/${1:<appname>}/src/${1:<appname>}.module.ts","","","  Note: Use option --dry-run to first check what will be generated.","        You can always add --help to learn more about the commands.","","  For more info: https://nrwl.io/nx/",""," */"]},{"prefix":"nx-ngrx-cheatsheet","description":"Nx Cheat Sheet","types":"typescript","body":["/*","\tRoot","","\tGenerate a new root level store","\tng generate ngrx app --module=apps/${1:appname}/src/app/app.module.ts  --root","","\tGenerate all the configuration in app.module.ts, without creating a store","\tng generate ngrx app --module=apps/${1:appname}/src/app/app.module.ts  --onlyEmptyRoot","","\tFeature","","\tGenerate a new feature level store in an existing library","\tng generate ngrx ${1:featurename} --module=libs/${2:<libname>}/src/${3:<modulename>}.module.ts","","\tNgRx Help","\tng generate ngrx [name] <options...>","\t\t--dry-run Run through without making any changes.","\t\taliases:  -d -dryRun","\t\t--force Forces overwriting of files.","\t\taliases:  -f -force","\t\t--app Specifies app name to use.","\t\taliases:  -a -app","\t\t--collection Schematics collection to use.","\t\taliases:  -c -collection","\t\t--lint-fix Use lint to fix files after generation.","\t\taliases:  -lf -lintFix","\t\t--module (string) Path to an Angular module (e.g., src/app/app.module.ts).","\t\t--only-add-files (boolean) Only add new NgRx files, without changing the module file (e.g., --onlyAddFiles).","\t\t--root (boolean) Add StoreModule.forRoot and EffectsModule.forRoot instead of forFeature (e.g., --root).","\t\t--only-empty-root (boolean) Do not generate any files. Only generate StoreModule.forRoot and EffectsModule.forRoot (e.g., --onlyEmptyRoot).","\t\t--skip-package-json (boolean) Do not add ngrx dependencies to package.json (e.g., --skipPackageJson)","\t\t--directory (string) (Default: +state) The store directory name (e.g., +state)","","\tFor more info: https://nrwl.io/nx/guide-setting-up-ngrx",""," */"]},{"prefix":"cli-cheatsheet","description":"Cli Cheat Sheet","types":"typescript","body":["/*","\tInstall Angular Cli","\tnpm install -g @angular/cli","","\tUsage","\tng help","","\tGenerate and serve an Angular project via a development server","\tng new PROJECT-NAME","\tcd PROJECT-NAME","\tng serve","","\tGenerate Component","\tYou can use the ng generate (or just ng g)","\tExamples","\t\tComponent: ng g component my-new-component","\t\tDirective: ng g directive my-new-directive","\t\tPipe:      ng g pipe my-new-pipe","\t\tService:   ng g service my-new-service","\t\tClass:     ng g class my-new-class","\t\tGuard:     ng g guard my-new-guard","\t\tInterface: ng g interface my-new-interface","\t\tEnum:      ng g enum my-new-enum","\t\tModule:    ng g module my-module","","\tBundling","\tAll builds make use of bundling, and using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality.","\tng build --prod","\tng serve --prod","","\tRun unit tests","\tng test","","\tRun tests with coverage. The report will be in the coverage/ directory","\tng test --code-coverage","","\tTests will execute after a build is executed via Karma, and it will automatically watch your files for changes.","\tYou can run tests a single time via --watch=false or --single-run.","","\tRun end-to-end tests","\tng e2e","","\tBefore running the tests make sure you are serving the app via ng serve. End-to-end tests are run via Protractor.","","\tLint you app code using tslint","\tng lint","","\tOpen the official Angular API documentation for a given keyword on angular.io.","\tng doc [search term]","","\tFor more info: https://cli.angular.io",""," */"]}]
