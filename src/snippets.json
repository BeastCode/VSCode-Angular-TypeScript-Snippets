{
  "Angular Component": {
    "prefix": "ng-component",
    "description": "Component with template and style urls",
    "types": "typescript",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${selector}',",
      "\ttemplateUrl: './${name}.component.html',",
      "\tstyleUrls: ['./${name}.component.css']",
      "})",
      "export class ${Name}Component implements OnInit {",
      "\tconstructor($0) { $1}",
      "",
      "\tngOnInit() { }",
      "}$2"
    ]
  },
  "Angular Component Inline": {
    "prefix": "ng-component-inline",
    "description": "Component with inline Template and Styles",
    "types": "typescript",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${selector}',",
      "\ttemplate: `",
      "\t\t$1`,",
      "\tstyles: ['$2']",
      "})",
      "export class ${Name}Component implements OnInit {",
      "\tconstructor() { $0}",
      "",
      "\tngOnInit() { }",
      "}"
    ]
  },
  "Angular Directive": {
    "prefix": "ng-directive",
    "description": "Directive template",
    "types": "typescript",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({",
      "\tselector: '${selector}',",
      "})",
      "export class ${Name}Directive() {$0}"
    ]
  },
  "Angular CSS Directive": {
    "prefix": "ng-directive-css",
    "description": "CSS directive",
    "types": "typescript",
    "body": [
      "import { Directive, ElementRef, Input } from '@angular/core';",
      "",
      "@Directive({",
      "\tselector: '[${selector}]',",
      "})",
      "export class ${Name}Directive() {",
      "\tconstructor(el: ElementRef) {}",
      "",
      "\tprivate ${name}(${value}: string) {",
      "\tthis.el.nativeElement.style.${proptery} = ${value};",
      "\t}",
      "}"
    ]
  },
  "Angular Attribute Directive": {
    "prefix": "ng-directive-attribute",
    "description": "Attribute directive",
    "types": "typescript",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({",
      "\tselector: '[${selector}]',",
      "})",
      "export class ${Name}Directive() {$0}"
    ]
  },
  "Angular Service": {
    "prefix": "ng-service",
    "description": "Basic service",
    "types": "typescript",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ${Name}Service {",
      "$0}"
    ]
  },
  "Angular Bootstrapping": {
    "prefix": "ng-bootstraping",
    "description": "Bootstraping example",
    "types": "typescript",
    "body": [
      "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';",
      "import { enableProdMode } from '@angular/core';",
      "import { AppModule } from './app/app.module';",
      "",
      "if (environment.production) {",
      "\tenableProdMode();",
      "}",
      "platformBrowserDynamic().bootstrapModule(AppModule)",
      "\t.then(success => console.log(`Bootstrap success`))",
      "\t.catch(err => console.error(err));",
      "",
      "// Move to separate file",
      "export const environment = {",
      "\tproduction: false",
      "};"
    ]
  },
  "Angular ngModule": {
    "prefix": "ng-module-template",
    "description": "Module template",
    "types": "typescript",
    "body": [
      "import { NgModule } from '@angular/core';",
      "",
      "@NgModule({ declarations: [],",
      "\timports: [],",
      "\texports: [],",
      "\tproviders: [],",
      "\tbootstrap: []",
      "})",
      "class ${Name}Module {}"
    ]
  },
  "Angular ngRootModule": {
    "prefix": "ng-module",
    "description": "App root module",
    "types": "typescript",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { BrowserModule } from '@angular/platform-browser';",
      "import { ${App}Component }  from './${app}.component';",
      "",
      "@NgModule({ declarations: [ ${App}Component ],",
      "\timports: [ BrowserModule ],",
      "\tproviders: [],",
      "\tbootstrap: [ ${App}Component ]",
      "})",
      "export class ${App}Module {}"
    ]
  },
  "Angular Pipe": {
    "prefix": "ng-pipe",
    "description": "Pipe template",
    "types": "typescript",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({name: '${name}'})",
      "export class ${Name}Pipe()  implements PipeTransform {",
      "\ttransform(value: any): any {",
      "\t\t$0",
      "\t}",
      "}"
    ]
  },
  "Angular Pipe Example": {
    "prefix": "ng-pipe-example",
    "description": "Angular pipe example",
    "types": "typescript",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "/*",
      " * Raise the value exponentially",
      " * Takes an exponent argument that defaults to 1.",
      " * Usage:",
      " *   value | exponentialStrength:exponent",
      " * Example:",
      " *   {{ 2 |  exponentialStrength:10}}",
      " *   formats to: 1024",
      "*/",
      "@Pipe({name: 'exponentialStrength'})",
      "export class ExponentialStrengthPipe implements PipeTransform {",
      "\ttransform(value: number, exponent: string): number {",
      "\t\tlet exp = parseFloat(exponent);",
      "\t\treturn Math.pow(value, isNaN(exp) ? 1 : exp);",
      "\t}",
      "}"
    ]
  },
  "Angular UpperCase Pipe": {
    "prefix": "ng-pipe-uppercase",
    "description": "Uppercase pipe",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | uppercase }}$0"
    ]
  },
   "Angular LowerCase Pipe": {
    "prefix": "ng-pipe-lowercase",
    "description": "Lowercase pipe",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | lowercase }$0"
    ]
  },
  "Angular Date Pipe": {
    "prefix": "ng-pipe-date",
    "description": "Date pipe - Default format: 09/15/1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date }}$0"
    ]
  },
  "Angular Custom Date Pipe": {
    "prefix": "ng-pipe-date-custom",
    "description": "Date pipe - Format: \"MM/dd/yy\" = 09/15/71",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:\"MM/dd/yy\" }}$0"
    ]
  },
  "Angular Short Date Pipe": {
    "prefix": "ng-pipe-date-short",
    "description": "Short date pipe - Format: 09/15/1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:shortDate }}$0"
    ]
  },
  "Angular Full Date Pipe": {
    "prefix": "ng-pipe-date-full",
    "description": "Full date pipe - Format: Wednesday, September 15, 1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:fullDate }}$0"
    ]
  },
  "Angular Percent Pipe": {
    "prefix": "ng-pipe-percent",
    "description": "Percent pipe - Usage: number_expression &#x7c; percent[:digitInfo]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | percent:${digitInfo} }}$0"
    ]
  },
  "Angular Decimal Pipe": {
    "prefix": "ng-pipe-decimal",
    "description": "Decimal pipe - Usage: number_expression &#x7c; decimal[:digitInfo]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | decimal:${digitInfo} }}$0"
    ]
  },
  "Angular Slice Pipe": {
    "prefix": "ng-pipe-slice",
    "description": "Slice pipe - Usage: array_or_string_expression &#x7c; slice:start[:end]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | slice:${start}:${end} }}$0"
    ]
  },
  "Angular Currency Pipe": {
    "prefix": "ng-pipe-currency",
    "description": "Currency pipe - Usage: money &#x7c; currency:'EUR'",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | currency:'${CURRENCY}' }}$0"
    ]
  },
  "Angular Json Pipe": {
    "prefix": "ng-pipe-json",
    "description": "Json pipe - Usage: object &#x7c; json",
    "types": "typescript, html",
    "body": [
      "{{ ${object} | json }}$0"
    ]
  },
  "Angular Async Pipe": {
    "prefix": "ng-pipe-async",
    "description": "Async pipe - Usage: observable_or_promise_expression &#x7c; async",
    "types": "typescript, html",
    "body": [
      "{{ ${observable} | async }}$0"
    ]
  },
  "Angular Lifecycle OnChanges Hook": {
    "prefix": "ng-ngOnChanges",
    "description": "Lifecycle hook: Called before any other lifecycle hook",
    "types": "typescript",
    "body": [
      "ngOnChanges(changeRecord)() {",
      "\t//Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.",
      "\t//Add 'implements OnChanges' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle OnInit Hook": {
    "prefix": "ng-onInit",
    "description": "Lifecycle hook: Called after the constructor",
    "types": "typescript",
    "body": [
      "ngOnInit() {",
      "\t//Called after the constructor, initializing input properties, and the first call to ngOnChanges.",
      "\t//Add 'implements OnInit' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle DoCheck Hook": {
    "prefix": "ng-doCheck",
    "description": "Lifecycle hook: Called every time that the input properties of a component or a directive are checked",
    "types": "typescript",
    "body": [
      "ngDoCheck() {",
      "\t//Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.",
      "\t//Add 'implements DoCheck' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle AfterContentInit Hook": {
    "prefix": "ng-afterContentInit",
    "description": "Lifecycle hook: Called after ngOnInit when the component's or directive's content has been initialized",
    "types": "typescript",
    "body": [
      "ngAfterContentInit() {",
      "\t//Called after ngOnInit when the component's or directive's content has been initialized.",
      "\t//Add 'implements AfterContentInit' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle AfterContentChecked Hook": {
    "prefix": "ng-afterContentChecked",
    "description": "Lifecycle hook: Called after every check of the component's or directive's content",
    "types": "typescript",
    "body": [
      "ngAfterContentChecked() {",
      "\t//Called after every check of the component's or directive's content.",
      "\t//Add 'implements AfterContentChecked' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle AfterViewInit Hook": {
    "prefix": "ng-afterViewInit",
    "description": "Lifecycle hook: Called after ngAfterContentInit when the component's view has been initialized",
    "types": "typescript",
    "body": [
      "ngAfterViewInit() {",
      "\t//Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.",
      "\t//Add 'implements AfterViewInit' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle AfterViewChecked Hook": {
    "prefix": "ng-afterViewChecked",
    "description": "Lifecycle hook: Called after every check of the component's view. Applies to components only",
    "types": "typescript",
    "body": [
      "ngAfterViewChecked() {",
      "\t//Called after every check of the component's view. Applies to components only.",
      "\t//Add 'implements AfterViewChecked' to the class.",
      "\t$0",
      "}"
    ]
  },
  "Angular Lifecycle OnDestroy Hook": {
    "prefix": "ng-onDestroy",
    "description": "Lifecycle hook: Called before the instance is destroyed",
    "types": "typescript",
    "body": [
      "ngOnDestroy() {",
      "\t//Called once, before the instance is destroyed.",
      "\t//Add 'implements OnDestroy' to the class.",
      "\t$0",
      "}"
    ]
  },


 
  "Angular Routing": {
    "prefix": "ng-router",
    "description": "Router template",
    "types": "typescript",
    "body": [
      "import { Routes } from '@angular/router';",
      "",
      "import { ${Home}Component } from './';",
      "import { ${Name2}Component } from './';",
      "import { ${Name3}Component } from './';",
      "import { ${Name4}Component } from './';",
      "import { PageNotFoundComponent } from './';",
      "",
      "const routes: Routes = [",
      "\t{ path: '', component: ${Home}Component },",
      "\t{ path: '${path2}', component: ${Name2}Component },",
      "\t{ path: '${path3}', component: ${Name3}Component },",
      "\t{ path: '${path4}', component: ${Name4}Component },",
      "\t{ path: '**', component: PageNotFoundComponent },",
      "",
      "\t//{ path: 'path/:routeParam', component: MyComponent },",
      "\t//{ path: 'staticPath', component: ... },",
      "\t//{ path: '**', component: ... },",
      "\t//{ path: 'oldPath', redirectTo: '/staticPath' },", 
      "\t//{ path: ..., component: ..., data: { message: 'Custom' }",
      "]);"
    ]
  },
  "Angular Routes": {
    "prefix": "ng-router-routes",
    "description": "Routes to include in ngModule",
    "types": "typescript",
    "body": [
      "import { RouterModule } from '@angular/router';",
      "",
      "import { routes } from './routes';",
      "//",
      "@NgModule({",
      "\timports: [",
      "\t\tRouterModule.forRoot(routes)",
      "\t\t// other imports here",
      "\t],"
    ]
  },
  "Angular Router Link": {
    "prefix": "ng-router-link",
    "description": "Router link",
    "types": "typescript, html",
    "body": [
      "<a [routerLink]=\"[ '/${path}', ${routeParam} ]\">$0"
    ]
  },
  "Angular Router Active Link": {
    "prefix": "ng-router-linkActive",
    "description": "Router active link",
    "types": "typescript, html",
    "body": [
      "<a [routerLink]=\"[ '/${path}' ]\" routerLinkActive=\"active\">$0"
    ]
  },
  "Angular Router Outlet": {
    "prefix": "ng-router-outlet",
    "description": "Router outlet element",
    "types": "typescript, html",
    "body": [
      "<router-outlet></router-outlet>",
      "$0"
    ]
  },
  "Angular Router Outlet Name": {
    "prefix": "ng-router-outlet-name",
    "description": "Router outlet element with name",
    "types": "typescript, html",
    "body": [
      "<router-outlet name=\"${name}\"></router-outlet>",
      "$0"
    ]
  },
  "Angular ngRx Util": {
    "prefix": "ng-rx-util",
    "description": "ngRx Util",
    "types": "typescript",
    "body": [
      "/**",
      "\t* This function coerces a string into a string literal type.",
      " * Using tagged union types in TypeScript 2.0, this enables",
      " * powerful typechecking of our reducers.",
      " * ",
      " * Since every action label passes through this function it",
      " * is a good place to ensure all of our action labels",
      " * are unique.",
      " */",
      "",
      "let typeCache: { [label: string]: boolean } = {};",
      "export function type<T>(label: T | ''): T {",
      "\tif (typeCache[<string>label]) {",
      "\t\tthrow new Error(`Action type \"${label}\" is not unique\"`);",
      "\t}",
      "",
      "\ttypeCache[<string>label] = true;",
      "",
      "\treturn <T>label;",
      "}"
    ]
  },
  "Angular ngRx Reducer": {
    "prefix": "ng-rx-reducer",
    "description": "ngRx Reducer",
    "types": "typescript",
    "body": [
      "import * as ${class} from '../actions/${class}';",
      "",
      "export interface State {",
      " \t\t$1",
      "};",
      "",
      "const initialState: State = {",
      "\t\t$2",
      "};",
      "",
      "export function reducer(state = initialState, action: ${class}.Actions ): State {",
      "\tswitch (action.type) {",
      "\t\tcase ${class}.ActionTypes.${TYPE}: {",
      "\t\t\treturn {",
      "\t\t\t\t// return new ${class} state",
      "\t\t\t};",
      "\t\t}",
      "",
      "\t\tdefault: {",
      "\t\t\treturn state;",
      "\t\t}",
      "\t}",
      "}"
    ]
  },
  "Angular ngRx Actions": {
    "prefix": "ng-rx-actions",
    "description": "ngRx Actions class",
    "types": "typescript",
    "body": [
      "import { Action } from '@ngrx/store';",
      "import { ${Class} } from '../models/${class}';",
      "import { type } from '../util';",
      "",
      "/**",
      " * For each action type in an action group, make a simple",
      " * enum object for all of this group's action types.",
      " * ",
      " * The 'type' utility function coerces strings into string",
      " * literal types and runs a simple check to guarantee all",
      " * action types in the application are unique. ",
      " */",
      "export const ActionTypes = {",
      "  ${VERB}:           type('[${Class} ${Verb}')",
      "};",
      "",
      "/**",
      " * Every action is comprised of at least a type and an optional",
      " * payload. Expressing actions as classes enables powerful ",
      " * type checking in reducer functions.",
      " */",
      "export class ${Verb}Action implements Action {",
      "  type = ActionTypes.${VERB};",
      "",
      "  constructor(public payload: ${payloadType}) { }",
      "}",
      "",
      "/**",
      " * Export a type alias of all actions in this action group",
      " * so that reducers can easily compose action types",
      " */",
      "export type Actions",
      "  = ${Verb}Action;",
      "  //| AnotherAction"
    ]
  },
  "Angular ngRx Root Module": {
    "prefix": "ng-rx-module",
    "description": "ngRx Root Module",
    "types": "typescript",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { BrowserModule } from '@angular/platform-browser';",
      "import { RouterModule } from '@angular/router';",
      "import { StoreModule } from '@ngrx/store';",
      "import { RouterStoreModule } from '@ngrx/router-store';",
      "import { StoreDevtoolsModule } from '@ngrx/store-devtools';",
      "import { ${App}Component }  from './${app}.component';",
      "",
      "import { routes } from './routes';",
      "import { reducer } from './reducers';",
      "",
      "@NgModule({ declarations: [ ${App}Component ],",
      "\timports: [",
      "\t\tBrowserModule,",
      "\t\tRouterModule.forRoot(routes, { useHash: true }),",
      "\t\tStoreModule.provideStore(reducer),",
      "\t\tRouterStoreModule.connectRouter(),",
      "\t\tStoreDevtoolsModule.instrumentOnlyWithExtension(),",
      "\t],",
      "\tproviders: [],",
      "\tbootstrap: [ ${App}Component ]",
      "})",
      "export class ${App}Module {}"
    ]
  },
  "Angular ngRx Action": {
    "prefix": "ng-rx-action",
    "description": "ngRx Single action",
    "types": "typescript",
    "body": [
      "export const ${ACTION} = '${ACTION}';"
    ]
  },

  "Angular Test Synchronous Component": {
    "prefix": "ng-test-component-synchronous",
    "description": "TODO",
    "types": "typescript",
    "body": [
      "// synchronous beforeEach",
      "beforeEach(() => {",
      "\tfixture = TestBed.createComponent(${Name}Component);",
      "\tcomp    = fixture.componentInstance;",
      "\t${className}El  = fixture.debugElement.query(By.css('.${className}')); // find the element",
      "",
      "\t// pretend that it was wired to something that supplied a ${className}",
      "\texpected${ClassName} = new ${ClassName}($1);",
      "\tcomp.${className} = expected${ClassName};",
      "\tfixture.detectChanges(); // trigger initial data binding",
      "});$0"
    ]
  },
  "Angular Test Async Component": {
    "prefix": "ng-test-component-async",
    "description": "TODO",
    "types": "typescript",
    "body": [
      "// async beforeEach",
      "beforeEach( async(() => {",
      "\tTestBed.configureTestingModule({",
      "\t\tdeclarations: [ ${Name}Component ],",
      "\t})",
      "\t.compileComponents(); // compile template and css",
      "}));$0"
    ]
  },



 


  "Angular Test Directive": {
    "prefix": "ng-test-directive",
    "description": "TODO",
    "types": "typescript",
    "body": [
      ""
    ]
  },
  "Angular Test Service": {
    "prefix": "ng-test-service",
    "description": "TODO",
    "types": "typescript",
    "body": [
      ""
    ]
  },
  "Angular Test Pipe": {
    "prefix": "ng-test-pipe",
    "description": "Test a pipe",
    "types": "typescript",
    "body": [
      "describe('${Name}Pipe', () => {",
      "\tlet pipe = new ${Name}Pipe();",
      "",
      "\tit('transforms \"${input}\" to \"${output}\"', () => {",
      "\t\texpect(pipe.transform('${input}')).toBe('${output}');",
      "\t});",
      "});"
    ]
  },
  


  "Angular If Directive": {
    "prefix": "ng-if",
    "description": "If directive: *ngIf=\"statement\"",
    "types": "typescript, html",
    "body": [
      "*ngIf=\"${statement}\""
    ]
  },
  "Angular For-loop Directive": {
    "prefix": "ng-for",
    "description": "For-loop directive",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${item}s\"$0"
    ]
  },
  "Angular For-loop Directive with li element": {
    "prefix": "ng-for-li",
    "description": "For-loop directive with li element",
    "types": "typescript, html",
    "body": [
      "<li *ngFor=\"let ${item} of ${item}s\">$0</li>"
    ]
  },
  "Angular For-loop Directive with index": {
    "prefix": "ng-for-index",
    "description": "For-loop directive with index",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${item}s; let i=index\"$0"
    ]
  },
  "Angular For-loop Directive with trackBy": {
    "prefix": "ng-for-trackBy",
    "description": "For-loop directive with trackBy",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${item}s; trackBy:${item}.id\""
    ]
  },

  "Angular Class": {
    "prefix": "ng-class",
    "description": "CSS class",
    "types": "typescript, html",
    "body": [
      "[ngClass]=\"{${class}}\""
    ]
  },
  "Angular Style": {
    "prefix": "ng-style",
    "description": "CSS style",
    "types": "typescript, html",
    "body": [
      "[ngStyle]=\"{${style}: ${preference}\""
    ]
  },
  "Angular Switch": {
    "prefix": "ng-switch",
    "description": "Switch template",
    "types": "typescript",
    "body": [
      "<span [ngSwitch]=\"\">",
        "<p *ngSwitchCase=\"true\">",
        "",
        "</p>",
        "<p *ngSwitchCase=\"false\">",
        "",
        "</p>",
        "<p *ngSwitchDefault>",
        "",
        "</p>",
      "</span>"
    ]
  },
  "Angular Property": {
    "prefix": "ng-property",
    "description": "Property: [property]=\"statement\"",
    "types": "typescript, html",
    "body": [
      "[property]=\"${statment}\""
    ]
  },
  "Angular Event": {
    "prefix": "ng-event",
    "description": "Event: (event) = \"onEvent()\"",
    "types": "typescript, html",
    "body": [
      "(${event}) = \"on${Event}()\"$0"
    ]
  },
  "Angular Input Property": {
    "prefix": "ng-input",
    "description": "Class Input Property",
    "types": "typescript",
    "body": [
      "@Input() ${class}: ${Class};$0"
    ]
  },
  "Angular Output Event": {
    "prefix": "ng-output",
    "description": "Class Output Event",
    "types": "typescript",
    "body": [
      "@Output() ${methodName} = new EventEmitter<${Class}>();$0"
    ]
  },
  "Angular Oneway Binding": {
    "prefix": "ng-binding-oneway",
    "description": "Property: [property]=\"statement\"",
    "types": "typescript, html",
    "body": [
      "[property]=\"${statment}\""
    ]
  },
  "Angular Twoway Binding": {
    "prefix": "ng-binding-twoway",
    "description": "Two-way data binding with the NgModel",
    "types": "typescript, html",
    "body": [
      "[(ngModel)]=\"${Name}\"$0"
    ]
  },
  "Angular Interpolation": {
    "prefix": "ng-interpolation",
    "description": "Interpolation: {{ interpolation }}",
    "types": "typescript, html",
    "body": [
      "{{ ${interpolation} }}$0"
    ]
  },


  "Angular 1 Loop Directive": {
    "prefix": "ng-repeat",
    "description": "Use ngFor instead.",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${item}s\"$0"
    ]
  },
  "Angular Click Event": {
    "prefix": "ng-click",
    "description": "Click event",
    "types": "typescript, html",
    "body": [
      "(click)=\"${expression}\"$0"
    ]
  },
  "Angular 1 Controller": {
    "prefix": "ng-controller",
    "description": "Use component instead.",
    "types": "typescript",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${selector}',",
      "\ttemplateUrl: './${name}.component.html',",
      "\tstyleUrls: ['./${name}.component.css']",
      "})",
      "export class ${Name}Component implements OnInit {",
      "\tconstructor() { $0}",
      "",
      "\tngOnInit() { }",
      "}"
    ]
  },
  "Angular 1 Show Directive": {
    "prefix": "ng-show",
    "description": "Usage: Bind to the hidden property.",
    "types": "typescript, html",
    "body": [
      "[hidden]=\"!${expression}\"$0"
    ]
  },
  "Angular 1 Hide Directive": {
    "prefix": "ng-hide",
    "description": "Usage: Bind to the hidden property.",
    "types": "typescript, html",
    "body": [
      "[hidden]=\"${expression}\"$0"
    ]
  },
  "Angular 1 Href Directive": {
    "prefix": "ng-href",
    "description": "Usage: Bind to the href property.",
    "types": "typescript, html",
    "body": [
      "[href]=\"${url}\"$0"
    ]
  },
  "Angular 1 Src Directive": {
    "prefix": "ng-src",
    "description": "Usage: Bind to the src property.",
    "types": "typescript, html",
    "body": [
      "[src]=\"${url}\"$0"
    ]
  },
  "Angular 1 OrderBy": {
    "prefix": "ng-orderBy",
    "description": "For performance reasons, no comparable pipe exists in Angular 2. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.",
    "types": "typescript, html",
    "body": [
      "$0"
    ]
  },
  "Angular 1 Filter": {
    "prefix": "ng-filter",
    "description": "For performance reasons, no comparable pipe exists in Angular 2. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.",
    "types": "typescript, html",
    "body": [
      "$0"
    ]
  },
  "Submit Button": {
    "prefix": "ng-button-submit",
    "description": "A submit button element with a click event",
    "types": "typescript, html",
    "body": [
      "<button type=\"submit\">${Submit}</button>",
      "$0"
    ]
  },
  "Click Button": {
    "prefix": "ng-button",
    "description": "A submit button element with a click event",
    "types": "typescript, html",
    "body": [
      "<button (click)=\"${onClick()}\">${name}</button>",
      "$0"
    ]
  },
  "ng import": {
    "prefix": "ng-import",
    "description": "import <module or component> from '<path>';",
    "types": "typescript, html",
    "body": [
      "import ${module or component} from '${path}';",
      "$0"
    ]
  }
  

}
