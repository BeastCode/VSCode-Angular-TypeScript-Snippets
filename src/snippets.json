{
  "Angular Component": {
    "prefix": "ng-component",
    "description": "Angular 2+ Component Snippet",
    "types": "typescript",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${selector}',",
      "\ttemplateUrl: './${name}.component.html',",
      "\tstyleUrls: ['./${name}.component.css']",
      "})",
      "export class ${Name}Component implements OnInit {",
      "\tconstructor($0) { $1}",
      "",
      "\tngOnInit() { }",
      "}$2"
    ]
  },
  "Angular Component Inline": {
    "prefix": "ng-component-inline",
    "description": "Angular 2+ Component Inline Snippet",
    "types": "typescript",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${selector}',",
      "\ttemplate: `",
      "\t\t$1`,",
      "\tstyles: ['$2']",
      "})",
      "export class ${Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }",
      "}"
    ]
  },
  "Angular Service": {
    "prefix": "ng-service",
    "description": "Angular 2+ Service",
    "types": "typescript",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ${Name}Service {",
      "$0}"
    ]
  },
 
  "Angular 2+ Bootstrapping": {
    "prefix": "ng-bootstraping",
    "description": "",
    "types": "typescript",
    "body": [
      "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';",
      "import { enableProdMode } from '@angular/core';",
      "import { AppModule } from './app/app.module';",
      "",
      "if (environment.production) {",
      "\tenableProdMode();",
      "}",
      "platformBrowserDynamic().bootstrapModule(AppModule)",
      "\t.then(success => console.log(`Bootstrap success`))",
      "\t.catch(err => console.error(err));",
      "",
      "// Move to separate file",
      "export const environment = {",
      "\tproduction: false",
      "};"
    ]
  },
  "Angular 2+ ngModule": {
    "prefix": "ng-module",
    "description": "",
    "types": "typescript",
    "body": [
      "import { NgModule } from '@angular/core';",
      "",
      "@NgModule({ declarations: [],",
      "\timports: [],",
      "\texports: [],",
      "\tproviders: [],",
      "\tbootstrap: []",
      "})",
      "class ${Name}Module {}"
    ]
  },
  "Angular 2+ Pipe": {
    "prefix": "ng-pipe",
    "description": "",
    "types": "typescript",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({name: '${name}'})",
      "export class ${Name}Pipe()  implements PipeTransform {",
      "\ttransform(value: any): any {",
      "\t\t$0",
      "\t}",
      "}"
    ]
  },
  "Angular 2+ Pipe Example": {
    "prefix": "ng-pipe-example",
    "description": "Angular  Pipe Example",
    "types": "typescript",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "/*",
      " * Raise the value exponentially",
      " * Takes an exponent argument that defaults to 1.",
      " * Usage:",
      " *   value | exponentialStrength:exponent",
      " * Example:",
      " *   {{ 2 |  exponentialStrength:10}}",
      " *   formats to: 1024",
      "*/",
      "@Pipe({name: 'exponentialStrength'})",
      "export class ExponentialStrengthPipe implements PipeTransform {",
      "\ttransform(value: number, exponent: string): number {",
      "\t\tlet exp = parseFloat(exponent);",
      "\t\treturn Math.pow(value, isNaN(exp) ? 1 : exp);",
      "\t}",
      "}"
    ]
  },
  "Angular 2+ UpperCase Pipe": {
    "prefix": "ng-pipe-uppercase",
    "description": "",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | uppercase }}$0"
    ]
  },
   "Angular 2+ lowerCase Pipe": {
    "prefix": "ng-pipe-lowercase",
    "description": "",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | lowercase }$0"
    ]
  },
  "Angular 2+ Date Pipe": {
    "prefix": "ng-pipe-date",
    "description": "Format: 09/15/1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date }}$0"
    ]
  },
  "Angular 2+ Custom Date Pipe": {
    "prefix": "ng-pipe-date-custom",
    "description": "Format: \"MM/dd/yy\" = 09/15/71",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:\"MM/dd/yy\" }}$0"
    ]
  },
  "Angular 2+ Short Date Pipe": {
    "prefix": "ng-pipe-date-short",
    "description": "Format:  09/15/1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:shortDate }}$0"
    ]
  },
  "Angular 2+ Full Date Pipe": {
    "prefix": "ng-pipe-date-full",
    "description": "Format: Wednesday, September 15, 1971",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | date:fullDate }}$0"
    ]
  },
  "Angular 2+ Percent Pipe": {
    "prefix": "ng-pipe-percent",
    "description": "Usage: number_expression | percent[:digitInfo]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | percent:${digitInfo} }}$0"
    ]
  },
  "Angular 2+ Decimal Pipe": {
    "prefix": "ng-pipe-decimal",
    "description": "Usage: number_expression | decimal[:digitInfo]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | decimal:${digitInfo} }}$0"
    ]
  },
  "Angular 2+ Slice Pipe": {
    "prefix": "ng-pipe-slice",
    "description": "Usage: array_or_string_expression | slice:start[:end]",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | slice:${start}:${end} }}$0"
    ]
  },
  "Angular 2+ Currency Pipe": {
    "prefix": "ng-pipe-currency",
    "description": "Usage: money | currency:'EUR'",
    "types": "typescript, html",
    "body": [
      "{{ ${variable} | currency:'${CURRENCY}' }}$0"
    ]
  },
  "Angular 2+ Json Pipe": {
    "prefix": "ng-pipe-json",
    "description": "Usage: object | json",
    "types": "typescript, html",
    "body": [
      "{{ ${object} | json }}$0"
    ]
  },
  "Angular 2+ Async Pipe": {
    "prefix": "ng-pipe-async",
    "description": "Usage: observable_or_promise_expression | async",
    "types": "typescript, html",
    "body": [
      "{{ ${observable} | async }}$0"
    ]
  },
  "Angular 2+ Directive": {
    "prefix": "ng-directive",
    "description": "",
    "types": "typescript",
    "body": [
      "@Directive({...})",
      "class ${Name}Directive() {}"
    ]
  },
  
  "Angular 2+ Lifecycle OnChanges Hook": {
    "prefix": "ng-ngOnChanges",
    "description": "",
    "types": "typescript",
    "body": [
      "ngOnChanges(changeRecord)() {",
      "\t//Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle OnInit Hook": {
    "prefix": "ng-onInit",
    "description": "",
    "types": "typescript",
    "body": [
      "ngOnInit() {",
      "\t//Called after the constructor, initializing input properties, and the first call to ngOnChanges.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle DoCheck Hook": {
    "prefix": "ng-doCheck",
    "description": "",
    "types": "typescript",
    "body": [
      "ngDoCheck() {",
      "\t//Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle AfterContentInit Hook": {
    "prefix": "ng-afterContentInit",
    "description": "",
    "types": "typescript",
    "body": [
      "ngAfterContentInit() {",
      "\t//Called after ngOnInit when the component's or directive's content has been initialized.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle AfterContentChecked Hook": {
    "prefix": "ng-AfterContentChecked",
    "description": "",
    "types": "typescript",
    "body": [
      "ngAfterContentChecked() {",
      "\t//Called after every check of the component's or directive's content.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle AfterViewInit Hook": {
    "prefix": "ng-afterViewInit",
    "description": "",
    "types": "typescript",
    "body": [
      "ngAfterViewInit() {",
      "\t//Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle AfterViewChecked Hook": {
    "prefix": "ng-afterViewChecked",
    "description": "",
    "types": "typescript",
    "body": [
      "ngAfterViewChecked() {",
      "\t//Called after every check of the component's view. Applies to components only.",
      "/t$0",
      "}"
    ]
  },
  "Angular 2+ Lifecycle OnDestroy Hook": {
    "prefix": "ng-onDestroy",
    "description": "",
    "types": "typescript",
    "body": [
      "ngOnDestroy() {",
      "\t//Called once, before the instance is destroyed.",
      "/t$0",
      "}"
    ]
  },


 
  "Angular 2+ Routing": {
    "prefix": "ng-router",
    "description": "",
    "types": "typescript",
    "body": [
      "const routes: Routes = [",
      "\t{ path: '', component: HomeComponent },",
      "\t{ path: 'path/:routeParam', component: MyComponent },",
      "\t{ path: 'staticPath', component: ... },",
      "\t{ path: '**', component: ... },",
      "\t{ path: 'oldPath', redirectTo: '/staticPath' },",
      "\t{ path: ..., component: ..., data: { message: 'Custom' } }",
      "]);",
      "",
      "const routing = RouterModule.forRoot(routes);"
    ]
  },
  "Angular 2+ Routes": {
    "prefix": "ng-router-routes",
    "description": "TODO",
    "types": "typescript",
    "body": [
      "import { Routes, RouterModule, ... } from '@angular/router';",
      "",
      ""
    ]
  },
  "Angular 2+ Router Link": {
    "prefix": "ng-router-link",
    "description": "",
    "types": "typescript, html",
    "body": [
      "<a [routerLink]=\"[ '/${path}', ${routeParam} ]\">"
    ]
  },
  "Angular 2+ Router Active Link": {
    "prefix": "ng-router-linkActive",
    "description": "",
    "types": "typescript, html",
    "body": [
      "<a [routerLink]=\"[ '/path' ]\" routerLinkActive=\"active\">"
    ]
  },
  "Angular 2+ Router Link with href ": {
    "prefix": "ng-router-linkWithHref",
    "description": "TODO",
    "types": "typescript",
    "body": [
      ""
    ]
  },
  "Angular 2+ Router Outlet": {
    "prefix": "ng-router-outlet",
    "description": "",
    "types": "typescript, html",
    "body": [
      "<router-outlet></router-outlet>",
      "$0"
    ]
  },


  "Angular 2+ ngRx": {
    "prefix": "ng-rx",
    "description": "TODO",
    "types": "typescript",
    "body": [
      ""
    ]
  },
  "Angular 2+ ngRx2": {
    "prefix": "ng-rx2",
    "description": "TODO",
    "types": "typescript",
    "body": [
      ""
    ]
  },


  "Angular 2+ Test Component": {
    "prefix": "ng-test-component",
    "description": "TODO",
    "types": "typescript",
    "body": [
      ""
    ]
  },
  "Angular 2+ Test Directive": {
    "prefix": "ng-test-directive",
    "description": "TODO",
    "types": "typescript",
    "body": [
      ""
    ]
  },
  "Angular 2+ Test Service": {
    "prefix": "ng-test-service",
    "description": "TODO",
    "types": "typescript",
    "body": [
      ""
    ]
  },
  "Angular 2+ Test Pipe": {
    "prefix": "ng-test-pipe",
    "description": "TODO",
    "types": "typescript",
    "body": [
      "describe('TitleCasePipe', () => {",
      "\tlet pipe = new TitleCasePipe();",
      "",
      "\tit('transforms \"abc\" to \"Abc\"', () => {",
      "\t\texpect(pipe.transform('abc')).toBe('Abc');",
      "\t});",
      "});"
    ]
  },
  


  "Angular 2+ If Directive": {
    "prefix": "ng-if",
    "description": "If Directive: *ngIf=\"statement\"",
    "types": "typescript, html",
    "body": [
      "*ngIf=\"${statement}\""
    ]
  },
  "Angular 2+ For-loop Directive": {
    "prefix": "ng-for",
    "description": "For-loop Directive Angular 2+",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${item}s\"$0"
    ]
  },
  "Angular 2+ For-loop Directive with li element": {
    "prefix": "ng-for-li",
    "description": "For-loop Directive with li element",
    "types": "typescript, html",
    "body": [
      "<li *ngFor=\"let ${item} of ${item}s\">$0</li>"
    ]
  },
  "Angular 2+ For-loop Directive with index": {
    "prefix": "ng-for-index",
    "description": "For-loop Directive Angular 2+",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${item}s; let i=index\"$0"
    ]
  },
  "Angular 2+ For-loop Directive with trackBy": {
    "prefix": "ng-for-trackBy",
    "description": "For-loop Directive Angular 2+",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${item}s; trackBy:${item}.id\""
    ]
  },

  "Angular 2+ Class": {
    "prefix": "ng-class",
    "description": "",
    "types": "typescript, html",
    "body": [
      ""
    ]
  },
  "Angular 2+ Style": {
    "prefix": "ng-style",
    "description": "",
    "types": "typescript, html",
    "body": [
      ""
    ]
  },
  "Angular 2+ Switch": {
    "prefix": "ng-switch",
    "description": "",
    "types": "typescript",
    "body": [
      "<span [ngSwitch]=\"\">",
        "<p *ngSwitchCase=\"true\">",
        "",
        "</p>",
        "<p *ngSwitchCase=\"false\">",
        "",
        "</p>",
        "<p *ngSwitchDefault>",
        "",
        "</p>",
      "</span>"
    ]
  },
  "Angular 2+ Proprty": {
    "prefix": "ng-property",
    "description": "Property: [property]=\"statement\"",
    "types": "typescript, html",
    "body": [
      "[property]=\"statment\""
    ]
  },
  "Angular 2+ Event": {
    "prefix": "ng-event",
    "description": "Event: (event) = \"onEvent()\"",
    "types": "typescript, html",
    "body": [
      "(${event}) = \"on${Event}()\""
    ]
  },
  "Angular 2+ Oneway Binding": {
    "prefix": "ng-binding-oneway",
    "types": "typescript, html",
    "description": "",
    "body": [
      ""
    ]
  },
  "Angular 2+ Twoway Binding": {
    "prefix": "ng-binding-twoway",
    "description": "Property and Event: [(ngModel)]=\"heroName\"",
    "types": "typescript, html",
    "body": [
      "[(ngModel)]=\"heroName\""
    ]
  },
  "Angular 2+ Interpolation": {
    "prefix": "ng-interpolation",
    "description": "Interpolation: {{ interpolation }}",
    "types": "typescript, html",
    "body": [
      "{{ ${interpolation} }}"
    ]
  },


  "Angular 1 Loop Directive": {
    "prefix": "ng-repeat",
    "description": "Use ngFor instead.",
    "types": "typescript, html",
    "body": [
      "*ngFor=\"let ${item} of ${item}s\"$0"
    ]
  },
  "Angular 2+ Click Event": {
    "prefix": "ng-click",
    "description": "Click event",
    "types": "typescript, html",
    "body": [
      "(click)=\"${expression}\"$0"
    ]
  },
  "Angular 1 Controller": {
    "prefix": "ng-controller",
    "description": "Use component instead.",
    "types": "typescript",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${selector}',",
      "\ttemplateUrl: './${name}.component.html',",
      "\tstyleUrls: ['./${name}.component.css']",
      "})",
      "export class ${Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }",
      "}"
    ]
  },
  "Angular 1 Show Directive": {
    "prefix": "ng-show",
    "description": "Usage: Bind to the hidden property.",
    "types": "typescript, html",
    "body": [
      "[hidden]=\"!${expression}\""
    ]
  },
  "Angular 1 Hide Directive": {
    "prefix": "ng-hide",
    "description": "Usage: Bind to the hidden property.",
    "types": "typescript, html",
    "body": [
      "[hidden]=\"${expression}\""
    ]
  },
  "Angular 1 Href Directive": {
    "prefix": "ng-href",
    "description": "Usage: Bind to the href property.",
    "types": "typescript, html",
    "body": [
      "[href]=\"${url}\"$0"
    ]
  },
  "Angular 1 Src Directive": {
    "prefix": "ng-src",
    "description": "Usage: Bind to the src property.",
    "types": "typescript, html",
    "body": [
      "[src]=\"${url}\"$0"
    ]
  },
  "Angular 1 OrderBy": {
    "prefix": "ng-orderBy",
    "description": "For performance reasons, no comparable pipe exists in Angular 2. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.",
    "types": "typescript, html",
    "body": [
      "$0"
    ]
  },
  "Angular 1 Filter": {
    "prefix": "ng-filter",
    "description": "For performance reasons, no comparable pipe exists in Angular 2. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.",
    "types": "typescript, html",
    "body": [
      "$0"
    ]
  }
}
